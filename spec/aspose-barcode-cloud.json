{
  "x-generator": "NSwag v12.0.14.0 (NJsonSchema v9.13.18.0 (Newtonsoft.Json v13.0.0.0))",
  "swagger": "2.0",
  "info": {
    "title": "Aspose.Barcode Cloud API Reference",
    "version": "3.0"
  },
  "host": "api.aspose.cloud",
  "basePath": "/v3.0",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/barcode/scan": {
      "post": {
        "tags": [
          "Barcode"
        ],
        "summary": "Quickly scan a barcode from an image.",
        "operationId": "ScanBarcode",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "file",
            "name": "imageFile",
            "in": "formData",
            "required": true,
            "description": "Image as file",
            "x-nullable": true
          },
          {
            "type": "array",
            "name": "decodeTypes",
            "in": "formData",
            "description": "Types of barcode to recognize",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "$ref": "#/definitions/DecodeBarcodeType"
            }
          },
          {
            "type": "integer",
            "name": "timeout",
            "in": "formData",
            "description": "Timeout of recognition process in milliseconds.\n Default value is 15_000 (15 seconds).\n Maximum value is 30_000 (1/2 minute).\n In case of a timeout RequestTimeout (408) status will be returned.\n Try reducing the image size to avoid timeout.",
            "format": "int32",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "BarcodeResponseList with barcode data.",
            "schema": {
              "$ref": "#/definitions/BarcodeResponseList"
            }
          },
          "400": {
            "x-nullable": true,
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/generate": {
      "get": {
        "tags": [
          "Barcode"
        ],
        "summary": "Generate barcode.",
        "operationId": "GetBarcodeGenerate",
        "produces": [
          "image/png",
          "image/bmp",
          "image/gif",
          "image/jpeg",
          "image/svg+xml",
          "image/tiff"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "Type",
            "in": "query",
            "required": true,
            "description": "Type of barcode to generate.",
            "x-schema": {
              "$ref": "#/definitions/EncodeBarcodeType"
            },
            "x-nullable": true,
            "enum": [
              "Codabar",
              "Code11",
              "Code39Standard",
              "Code39Extended",
              "Code93Standard",
              "Code93Extended",
              "Code128",
              "GS1Code128",
              "EAN8",
              "EAN13",
              "EAN14",
              "SCC14",
              "SSCC18",
              "UPCA",
              "UPCE",
              "ISBN",
              "ISSN",
              "ISMN",
              "Standard2of5",
              "Interleaved2of5",
              "Matrix2of5",
              "ItalianPost25",
              "IATA2of5",
              "ITF14",
              "ITF6",
              "MSI",
              "VIN",
              "DeutschePostIdentcode",
              "DeutschePostLeitcode",
              "OPC",
              "PZN",
              "Code16K",
              "Pharmacode",
              "DataMatrix",
              "QR",
              "Aztec",
              "Pdf417",
              "MacroPdf417",
              "AustraliaPost",
              "Postnet",
              "Planet",
              "OneCode",
              "RM4SCC",
              "DatabarOmniDirectional",
              "DatabarTruncated",
              "DatabarLimited",
              "DatabarExpanded",
              "SingaporePost",
              "GS1DataMatrix",
              "AustralianPosteParcel",
              "SwissPostParcel",
              "PatchCode",
              "DatabarExpandedStacked",
              "DatabarStacked",
              "DatabarStackedOmniDirectional",
              "MicroPdf417",
              "GS1QR",
              "MaxiCode",
              "Code32",
              "DataLogic2of5",
              "DotCode",
              "DutchKIX",
              "UpcaGs1Code128Coupon",
              "UpcaGs1DatabarCoupon",
              "CodablockF",
              "GS1CodablockF",
              "Mailmark",
              "GS1DotCode",
              "HanXin",
              "GS1HanXin",
              "GS1Aztec",
              "GS1MicroPdf417"
            ]
          },
          {
            "type": "string",
            "name": "Text",
            "in": "query",
            "required": true,
            "description": "Text to encode.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "TwoDDisplayText",
            "in": "query",
            "description": "Text that will be displayed instead of codetext in 2D barcodes.\nUsed for: Aztec, Pdf417, DataMatrix, QR, MaxiCode, DotCode",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "TextLocation",
            "in": "query",
            "description": "Specify the displaying Text Location, set to CodeLocation.None to hide CodeText.\nDefault value: CodeLocation.Below.",
            "x-schema": {
              "$ref": "#/definitions/CodeLocation"
            },
            "x-nullable": true,
            "enum": [
              "Below",
              "Above",
              "None"
            ]
          },
          {
            "type": "string",
            "name": "TextAlignment",
            "in": "query",
            "description": "Text alignment.",
            "x-schema": {
              "$ref": "#/definitions/TextAlignment"
            },
            "x-nullable": true,
            "enum": [
              "Left",
              "Center",
              "Right"
            ]
          },
          {
            "type": "string",
            "name": "TextColor",
            "in": "query",
            "description": "Specify the displaying CodeText's Color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "FontSizeMode",
            "in": "query",
            "description": "Specify FontSizeMode. If FontSizeMode is set to Auto, font size will be calculated automatically based on xDimension value.\nIt is recommended to use FontSizeMode.Auto especially in AutoSizeMode.Nearest or AutoSizeMode.Interpolation.\nDefault value: FontSizeMode.Auto.",
            "x-schema": {
              "$ref": "#/definitions/FontMode"
            },
            "x-nullable": true,
            "enum": [
              "Auto",
              "Manual"
            ]
          },
          {
            "type": "boolean",
            "name": "NoWrap",
            "in": "query",
            "description": "Specify word wraps (line breaks) within text.\nDefault value: false.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "Resolution",
            "in": "query",
            "description": "Resolution of the BarCode image.\nOne value for both dimensions.\nDefault value: 96 dpi.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ResolutionX",
            "in": "query",
            "description": "DEPRECATED: Use 'Resolution' instead.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ResolutionY",
            "in": "query",
            "description": "DEPRECATED: Use 'Resolution' instead.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "DimensionX",
            "in": "query",
            "description": "The smallest width of the unit of BarCode bars or spaces.\nIncrease this will increase the whole barcode image width.\nIgnored if AutoSizeMode property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "TextSpace",
            "in": "query",
            "description": "Space between the CodeText and the BarCode in Unit value.\nDefault value: 2pt.\nIgnored for EAN8, EAN13, UPCE, UPCA, ISBN, ISMN, ISSN, UpcaGs1DatabarCoupon.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Units",
            "in": "query",
            "description": "Common Units for all measuring in query. Default units: pixel.",
            "x-schema": {
              "$ref": "#/definitions/AvailableGraphicsUnit"
            },
            "x-nullable": true,
            "enum": [
              "Pixel",
              "Point",
              "Inch",
              "Millimeter"
            ]
          },
          {
            "type": "string",
            "name": "SizeMode",
            "in": "query",
            "description": "Specifies the different types of automatic sizing modes.\nDefault value: AutoSizeMode.None.",
            "x-schema": {
              "$ref": "#/definitions/AutoSizeMode"
            },
            "x-nullable": true,
            "enum": [
              "None",
              "Nearest",
              "Interpolation"
            ]
          },
          {
            "type": "number",
            "name": "BarHeight",
            "in": "query",
            "description": "Height of the barcode in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ImageHeight",
            "in": "query",
            "description": "Height of the barcode image in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ImageWidth",
            "in": "query",
            "description": "Width of the barcode image in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "RotationAngle",
            "in": "query",
            "description": "BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.\nIf RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.\nDefault value: 0.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BackColor",
            "in": "query",
            "description": "Background color of the barcode image.\nDefault value: Color.White.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BarColor",
            "in": "query",
            "description": "Bars color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BorderColor",
            "in": "query",
            "description": "Border color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "BorderWidth",
            "in": "query",
            "description": "Border width.\nDefault value: 0.\nIgnored if Visible is set to false.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BorderDashStyle",
            "in": "query",
            "description": "Border dash style.\nDefault value: BorderDashStyle.Solid.",
            "x-schema": {
              "$ref": "#/definitions/BorderDashStyle"
            },
            "x-nullable": true,
            "enum": [
              "Solid",
              "Dash",
              "Dot",
              "DashDot",
              "DashDotDot"
            ]
          },
          {
            "type": "boolean",
            "name": "BorderVisible",
            "in": "query",
            "description": "Border visibility. If false than parameter Width is always ignored (0).\nDefault value: false.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "EnableChecksum",
            "in": "query",
            "description": "Enable checksum during generation 1D barcodes.\nDefault is treated as Yes for symbology which must contain checksum, as No where checksum only possible.\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN, Codabar\nChecksum always used: Rest symbology",
            "x-schema": {
              "$ref": "#/definitions/EnableChecksum"
            },
            "x-nullable": true,
            "enum": [
              "Default",
              "Yes",
              "No"
            ]
          },
          {
            "type": "boolean",
            "name": "EnableEscape",
            "in": "query",
            "description": "Indicates whether explains the character \"\\\" as an escape character in CodeText property. Used for Pdf417, DataMatrix, Code128 only\nIf the EnableEscape is true, \"\\\" will be explained as a special escape character. Otherwise, \"\\\" acts as normal characters.\nAspose.BarCode supports input decimal ascii code and mnemonic for ASCII control-code characters. For example, \\013 and \\\\CR stands for CR.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "FilledBars",
            "in": "query",
            "description": "Value indicating whether bars are filled.\nOnly for 1D barcodes.\nDefault value: true.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AlwaysShowChecksum",
            "in": "query",
            "description": "Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "WideNarrowRatio",
            "in": "query",
            "description": "Wide bars to Narrow bars ratio.\nDefault value: 3, that is, wide bars are 3 times as wide as narrow bars.\nUsed for ITF, PZN, PharmaCode, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, IATA2of5, VIN, DeutschePost, OPC, Code32, DataLogic2of5, PatchCode, Code39Extended, Code39Standard",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "ValidateText",
            "in": "query",
            "description": "Only for 1D barcodes.\nIf codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.\nException always will be thrown for: Databar symbology if codetext is incorrect.\nException always will not be thrown for: AustraliaPost, SingaporePost, Code39Extended, Code93Extended, Code16K, Code128 symbology if codetext is incorrect.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "SupplementData",
            "in": "query",
            "description": "Supplement parameters.\nUsed for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "SupplementSpace",
            "in": "query",
            "description": "Space between main the BarCode and supplement BarCode.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "BarWidthReduction",
            "in": "query",
            "description": "Bars reduction value that is used to compensate ink spread while printing.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "UseAntiAlias",
            "in": "query",
            "description": "Indicates whether is used anti-aliasing mode to render image. Anti-aliasing mode is applied to barcode and text drawing.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Result image format.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Generated barcode image.",
            "schema": {
              "type": "file"
            }
          },
          "400": {
            "x-nullable": true,
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": true
      }
    },
    "/barcode/{name}/generate": {
      "put": {
        "tags": [
          "Barcode"
        ],
        "summary": "Generate barcode and save on server (from query params or from file with json or xml content)",
        "operationId": "PutBarcodeGenerateFile",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The image file name.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query",
            "required": true,
            "description": "Type of barcode to generate.",
            "x-schema": {
              "$ref": "#/definitions/EncodeBarcodeType"
            },
            "x-nullable": true,
            "enum": [
              "Codabar",
              "Code11",
              "Code39Standard",
              "Code39Extended",
              "Code93Standard",
              "Code93Extended",
              "Code128",
              "GS1Code128",
              "EAN8",
              "EAN13",
              "EAN14",
              "SCC14",
              "SSCC18",
              "UPCA",
              "UPCE",
              "ISBN",
              "ISSN",
              "ISMN",
              "Standard2of5",
              "Interleaved2of5",
              "Matrix2of5",
              "ItalianPost25",
              "IATA2of5",
              "ITF14",
              "ITF6",
              "MSI",
              "VIN",
              "DeutschePostIdentcode",
              "DeutschePostLeitcode",
              "OPC",
              "PZN",
              "Code16K",
              "Pharmacode",
              "DataMatrix",
              "QR",
              "Aztec",
              "Pdf417",
              "MacroPdf417",
              "AustraliaPost",
              "Postnet",
              "Planet",
              "OneCode",
              "RM4SCC",
              "DatabarOmniDirectional",
              "DatabarTruncated",
              "DatabarLimited",
              "DatabarExpanded",
              "SingaporePost",
              "GS1DataMatrix",
              "AustralianPosteParcel",
              "SwissPostParcel",
              "PatchCode",
              "DatabarExpandedStacked",
              "DatabarStacked",
              "DatabarStackedOmniDirectional",
              "MicroPdf417",
              "GS1QR",
              "MaxiCode",
              "Code32",
              "DataLogic2of5",
              "DotCode",
              "DutchKIX",
              "UpcaGs1Code128Coupon",
              "UpcaGs1DatabarCoupon",
              "CodablockF",
              "GS1CodablockF",
              "Mailmark",
              "GS1DotCode",
              "HanXin",
              "GS1HanXin",
              "GS1Aztec",
              "GS1MicroPdf417"
            ]
          },
          {
            "type": "string",
            "name": "Text",
            "in": "query",
            "required": true,
            "description": "Text to encode.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "TwoDDisplayText",
            "in": "query",
            "description": "Text that will be displayed instead of codetext in 2D barcodes.\nUsed for: Aztec, Pdf417, DataMatrix, QR, MaxiCode, DotCode",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "TextLocation",
            "in": "query",
            "description": "Specify the displaying Text Location, set to CodeLocation.None to hide CodeText.\nDefault value: CodeLocation.Below.",
            "x-schema": {
              "$ref": "#/definitions/CodeLocation"
            },
            "x-nullable": true,
            "enum": [
              "Below",
              "Above",
              "None"
            ]
          },
          {
            "type": "string",
            "name": "TextAlignment",
            "in": "query",
            "description": "Text alignment.",
            "x-schema": {
              "$ref": "#/definitions/TextAlignment"
            },
            "x-nullable": true,
            "enum": [
              "Left",
              "Center",
              "Right"
            ]
          },
          {
            "type": "string",
            "name": "TextColor",
            "in": "query",
            "description": "Specify the displaying CodeText's Color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "FontSizeMode",
            "in": "query",
            "description": "Specify FontSizeMode. If FontSizeMode is set to Auto, font size will be calculated automatically based on xDimension value.\nIt is recommended to use FontSizeMode.Auto especially in AutoSizeMode.Nearest or AutoSizeMode.Interpolation.\nDefault value: FontSizeMode.Auto.",
            "x-schema": {
              "$ref": "#/definitions/FontMode"
            },
            "x-nullable": true,
            "enum": [
              "Auto",
              "Manual"
            ]
          },
          {
            "type": "boolean",
            "name": "NoWrap",
            "in": "query",
            "description": "Specify word wraps (line breaks) within text.\nDefault value: false.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "Resolution",
            "in": "query",
            "description": "Resolution of the BarCode image.\nOne value for both dimensions.\nDefault value: 96 dpi.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ResolutionX",
            "in": "query",
            "description": "DEPRECATED: Use 'Resolution' instead.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ResolutionY",
            "in": "query",
            "description": "DEPRECATED: Use 'Resolution' instead.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "DimensionX",
            "in": "query",
            "description": "The smallest width of the unit of BarCode bars or spaces.\nIncrease this will increase the whole barcode image width.\nIgnored if AutoSizeMode property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "TextSpace",
            "in": "query",
            "description": "Space between the CodeText and the BarCode in Unit value.\nDefault value: 2pt.\nIgnored for EAN8, EAN13, UPCE, UPCA, ISBN, ISMN, ISSN, UpcaGs1DatabarCoupon.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Units",
            "in": "query",
            "description": "Common Units for all measuring in query. Default units: pixel.",
            "x-schema": {
              "$ref": "#/definitions/AvailableGraphicsUnit"
            },
            "x-nullable": true,
            "enum": [
              "Pixel",
              "Point",
              "Inch",
              "Millimeter"
            ]
          },
          {
            "type": "string",
            "name": "SizeMode",
            "in": "query",
            "description": "Specifies the different types of automatic sizing modes.\nDefault value: AutoSizeMode.None.",
            "x-schema": {
              "$ref": "#/definitions/AutoSizeMode"
            },
            "x-nullable": true,
            "enum": [
              "None",
              "Nearest",
              "Interpolation"
            ]
          },
          {
            "type": "number",
            "name": "BarHeight",
            "in": "query",
            "description": "Height of the barcode in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ImageHeight",
            "in": "query",
            "description": "Height of the barcode image in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "ImageWidth",
            "in": "query",
            "description": "Width of the barcode image in given units. Default units: pixel.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "RotationAngle",
            "in": "query",
            "description": "BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.\nIf RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.\nDefault value: 0.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BackColor",
            "in": "query",
            "description": "Background color of the barcode image.\nDefault value: Color.White.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BarColor",
            "in": "query",
            "description": "Bars color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BorderColor",
            "in": "query",
            "description": "Border color.\nDefault value: Color.Black.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "BorderWidth",
            "in": "query",
            "description": "Border width.\nDefault value: 0.\nIgnored if Visible is set to false.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "BorderDashStyle",
            "in": "query",
            "description": "Border dash style.\nDefault value: BorderDashStyle.Solid.",
            "x-schema": {
              "$ref": "#/definitions/BorderDashStyle"
            },
            "x-nullable": true,
            "enum": [
              "Solid",
              "Dash",
              "Dot",
              "DashDot",
              "DashDotDot"
            ]
          },
          {
            "type": "boolean",
            "name": "BorderVisible",
            "in": "query",
            "description": "Border visibility. If false than parameter Width is always ignored (0).\nDefault value: false.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "EnableChecksum",
            "in": "query",
            "description": "Enable checksum during generation 1D barcodes.\nDefault is treated as Yes for symbology which must contain checksum, as No where checksum only possible.\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN, Codabar\nChecksum always used: Rest symbology",
            "x-schema": {
              "$ref": "#/definitions/EnableChecksum"
            },
            "x-nullable": true,
            "enum": [
              "Default",
              "Yes",
              "No"
            ]
          },
          {
            "type": "boolean",
            "name": "EnableEscape",
            "in": "query",
            "description": "Indicates whether explains the character \"\\\" as an escape character in CodeText property. Used for Pdf417, DataMatrix, Code128 only\nIf the EnableEscape is true, \"\\\" will be explained as a special escape character. Otherwise, \"\\\" acts as normal characters.\nAspose.BarCode supports input decimal ascii code and mnemonic for ASCII control-code characters. For example, \\013 and \\\\CR stands for CR.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "FilledBars",
            "in": "query",
            "description": "Value indicating whether bars are filled.\nOnly for 1D barcodes.\nDefault value: true.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AlwaysShowChecksum",
            "in": "query",
            "description": "Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "WideNarrowRatio",
            "in": "query",
            "description": "Wide bars to Narrow bars ratio.\nDefault value: 3, that is, wide bars are 3 times as wide as narrow bars.\nUsed for ITF, PZN, PharmaCode, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, IATA2of5, VIN, DeutschePost, OPC, Code32, DataLogic2of5, PatchCode, Code39Extended, Code39Standard",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "ValidateText",
            "in": "query",
            "description": "Only for 1D barcodes.\nIf codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.\nException always will be thrown for: Databar symbology if codetext is incorrect.\nException always will not be thrown for: AustraliaPost, SingaporePost, Code39Extended, Code93Extended, Code16K, Code128 symbology if codetext is incorrect.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "SupplementData",
            "in": "query",
            "description": "Supplement parameters.\nUsed for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "SupplementSpace",
            "in": "query",
            "description": "Space between main the BarCode and supplement BarCode.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "BarWidthReduction",
            "in": "query",
            "description": "Bars reduction value that is used to compensate ink spread while printing.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "UseAntiAlias",
            "in": "query",
            "description": "Indicates whether is used anti-aliasing mode to render image. Anti-aliasing mode is applied to barcode and text drawing.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "Image's storage.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Image's folder.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "The image format.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "IActionResult with the operation status.",
            "schema": {
              "$ref": "#/definitions/ResultImageInfo"
            }
          },
          "400": {
            "x-nullable": true,
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/generateMultiple": {
      "post": {
        "tags": [
          "Barcode"
        ],
        "summary": "Generate multiple barcodes and return in response stream",
        "operationId": "PostGenerateMultiple",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "produces": [
          "image/png",
          "image/bmp",
          "image/gif",
          "image/jpeg",
          "image/svg+xml",
          "image/tiff"
        ],
        "parameters": [
          {
            "name": "generatorParamsList",
            "in": "body",
            "required": true,
            "description": "List of barcodes",
            "schema": {
              "$ref": "#/definitions/GeneratorParamsList"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Format to return stream in",
            "default": "png",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Response with streamed images",
            "schema": {
              "type": "file"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": true
      }
    },
    "/barcode/{name}/generateMultiple": {
      "put": {
        "tags": [
          "Barcode"
        ],
        "summary": "Generate image with multiple barcodes and put new file on server",
        "operationId": "PutGenerateMultiple",
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "New filename",
            "x-nullable": false
          },
          {
            "name": "generatorParamsList",
            "in": "body",
            "required": true,
            "description": "List of barcodes",
            "schema": {
              "$ref": "#/definitions/GeneratorParamsList"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "format",
            "in": "query",
            "description": "Format of file",
            "default": "png",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "Folder to place file to",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Response with result of operation",
            "schema": {
              "$ref": "#/definitions/ResultImageInfo"
            }
          },
          "400": {
            "x-nullable": true,
            "description": "Error",
            "schema": {
              "$ref": "#/definitions/ApiErrorResponse"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/{name}/recognize": {
      "get": {
        "tags": [
          "Barcode"
        ],
        "summary": "Recognize barcode from a file on server.",
        "operationId": "GetBarcodeRecognize",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The image file name.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "Type",
            "in": "query",
            "description": "The type of barcode to read.",
            "x-schema": {
              "$ref": "#/definitions/DecodeBarcodeType"
            },
            "x-nullable": true,
            "enum": [
              "all",
              "AustraliaPost",
              "Aztec",
              "ISBN",
              "Codabar",
              "Code11",
              "Code128",
              "GS1Code128",
              "Code39Extended",
              "Code39Standard",
              "Code93Extended",
              "Code93Standard",
              "DataMatrix",
              "DeutschePostIdentcode",
              "DeutschePostLeitcode",
              "EAN13",
              "EAN14",
              "EAN8",
              "IATA2of5",
              "Interleaved2of5",
              "ISSN",
              "ISMN",
              "ItalianPost25",
              "ITF14",
              "ITF6",
              "MacroPdf417",
              "Matrix2of5",
              "MSI",
              "OneCode",
              "OPC",
              "PatchCode",
              "Pdf417",
              "MicroPdf417",
              "Planet",
              "Postnet",
              "PZN",
              "QR",
              "MicroQR",
              "RM4SCC",
              "SCC14",
              "SSCC18",
              "Standard2of5",
              "Supplement",
              "UPCA",
              "UPCE",
              "VIN",
              "Pharmacode",
              "GS1DataMatrix",
              "DatabarOmniDirectional",
              "DatabarTruncated",
              "DatabarLimited",
              "DatabarExpanded",
              "SwissPostParcel",
              "AustralianPosteParcel",
              "Code16K",
              "DatabarStackedOmniDirectional",
              "DatabarStacked",
              "DatabarExpandedStacked",
              "CompactPdf417",
              "GS1QR",
              "MaxiCode",
              "MicrE13B",
              "Code32",
              "DataLogic2of5",
              "DotCode",
              "DutchKIX",
              "CodablockF",
              "Mailmark",
              "GS1DotCode",
              "HIBCCode39LIC",
              "HIBCCode128LIC",
              "HIBCAztecLIC",
              "HIBCDataMatrixLIC",
              "HIBCQRLIC",
              "HIBCCode39PAS",
              "HIBCCode128PAS",
              "HIBCAztecPAS",
              "HIBCDataMatrixPAS",
              "HIBCQRPAS",
              "HanXin",
              "GS1HanXin",
              "GS1Aztec",
              "GS1CompositeBar",
              "GS1MicroPdf417",
              "mostCommonlyUsed"
            ]
          },
          {
            "type": "array",
            "name": "Types",
            "in": "query",
            "description": "Multiple barcode types to read.",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "$ref": "#/definitions/DecodeBarcodeType"
            }
          },
          {
            "type": "string",
            "name": "ChecksumValidation",
            "in": "query",
            "description": "Enable checksum validation during recognition for 1D barcodes.\nDefault is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.\nChecksum never used: Codabar\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN\nChecksum always used: Rest symbologies",
            "x-schema": {
              "$ref": "#/definitions/ChecksumValidation"
            },
            "x-nullable": true,
            "enum": [
              "Default",
              "On",
              "Off"
            ]
          },
          {
            "type": "boolean",
            "name": "DetectEncoding",
            "in": "query",
            "description": "A flag which force engine to detect codetext encoding for Unicode.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Preset",
            "in": "query",
            "description": "Preset allows to configure recognition quality and speed manually.\nYou can quickly set up Preset by embedded presets: HighPerformance, NormalQuality,\nHighQuality, MaxBarCodes or you can manually configure separate options.\nDefault value of Preset is NormalQuality.",
            "x-schema": {
              "$ref": "#/definitions/PresetType"
            },
            "x-nullable": true,
            "enum": [
              "HighPerformance",
              "NormalQuality",
              "HighQualityDetection",
              "MaxQualityDetection",
              "HighQuality",
              "MaxBarCodes"
            ]
          },
          {
            "type": "integer",
            "name": "RectX",
            "in": "query",
            "description": "Set X of top left corner of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectY",
            "in": "query",
            "description": "Set Y of top left corner of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectWidth",
            "in": "query",
            "description": "Set Width of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectHeight",
            "in": "query",
            "description": "Set Height of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "StripFNC",
            "in": "query",
            "description": "Value indicating whether FNC symbol strip must be done.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "Timeout",
            "in": "query",
            "description": "Timeout of recognition process in milliseconds.\nDefault value is 15_000 (15 seconds).\nMaximum value is 30_000 (1/2 minute).\nIn case of a timeout RequestTimeout (408) status will be returned.\nTry reducing the image size to avoid timeout.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "MedianSmoothingWindowSize",
            "in": "query",
            "description": "Window size for median smoothing. Typical values are 3 or 4. Default value is 3. AllowMedianSmoothing must be set.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowMedianSmoothing",
            "in": "query",
            "description": "Allows engine to enable median smoothing as additional scan. Mode helps to recognize noised barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowComplexBackground",
            "in": "query",
            "description": "Allows engine to recognize color barcodes on color background as additional scan. Extremely slow mode.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDatamatrixIndustrialBarcodes",
            "in": "query",
            "description": "Allows engine for Datamatrix to recognize dashed industrial Datamatrix barcodes.\nSlow mode which helps only for dashed barcodes which consist from spots.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDecreasedImage",
            "in": "query",
            "description": "Allows engine to recognize decreased image as additional scan. Size for decreasing is selected by internal engine algorithms.\nMode helps to recognize barcodes which are noised and blurred but captured with high resolution.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDetectScanGap",
            "in": "query",
            "description": "Allows engine to use gap between scans to increase recognition speed. Mode can make recognition problems with low height barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowIncorrectBarcodes",
            "in": "query",
            "description": "Allows engine to recognize barcodes which has incorrect checksum or incorrect values.\nMode can be used to recognize damaged barcodes with incorrect text.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowInvertImage",
            "in": "query",
            "description": "Allows engine to recognize inverse color image as additional scan. Mode can be used when barcode is white on black background.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowMicroWhiteSpotsRemoving",
            "in": "query",
            "description": "Allows engine for Postal barcodes to recognize slightly noised images. Mode helps to recognize slightly damaged Postal barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowOneDFastBarcodesDetector",
            "in": "query",
            "description": "Allows engine for 1D barcodes to quickly recognize high quality barcodes which fill almost whole image.\nMode helps to quickly recognize generated barcodes from Internet.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowOneDWipedBarsRestoration",
            "in": "query",
            "description": "Allows engine for 1D barcodes to recognize barcodes with single wiped/glued bars in pattern.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowQRMicroQrRestoration",
            "in": "query",
            "description": "Allows engine for QR/MicroQR to recognize damaged MicroQR barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowRegularImage",
            "in": "query",
            "description": "Allows engine to recognize regular image without any restorations as main scan. Mode to recognize image as is.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowSaltAndPepperFiltering",
            "in": "query",
            "description": "Allows engine to recognize barcodes with salt and pepper noise type. Mode can remove small noise with white and black dots.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowWhiteSpotsRemoving",
            "in": "query",
            "description": "Allows engine to recognize image without small white spots as additional scan. Mode helps to recognize noised image as well as median smoothing filtering.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "CheckMore1DVariants",
            "in": "query",
            "description": "Allows engine to recognize 1D barcodes with checksum by checking more recognition variants. Default value: False.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "FastScanOnly",
            "in": "query",
            "description": "Allows engine for 1D barcodes to quickly recognize middle slice of an image and return result without using any time-consuming algorithms.\nDefault value: False.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowAdditionalRestorations",
            "in": "query",
            "description": "Allows engine using additional image restorations to recognize corrupted barcodes. At this time, it is used only in MicroPdf417 barcode type.\nDefault value: False.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "RegionLikelihoodThresholdPercent",
            "in": "query",
            "description": "Sets threshold for detected regions that may contain barcodes.\nValue 0.7 means that bottom 70% of possible regions are filtered out and not processed further.\nRegion likelihood threshold must be between [0.05, 0.9]\nUse high values for clear images with few barcodes.\nUse low values for images with many barcodes or for noisy images.\nLow value may lead to a bigger recognition time.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "array",
            "name": "ScanWindowSizes",
            "in": "query",
            "description": "Scan window sizes in pixels.\nAllowed sizes are 10, 15, 20, 25, 30.\nScanning with small window size takes more time and provides more accuracy but may fail in detecting very big barcodes.\nCombining of several window sizes can improve detection quality.",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "type": "number",
            "name": "Similarity",
            "in": "query",
            "description": "Similarity coefficient depends on how homogeneous barcodes are.\nUse high value for clear barcodes.\nUse low values to detect barcodes that ara partly damaged or not lighten evenly.\nSimilarity coefficient must be between [0.5, 0.9]",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "SkipDiagonalSearch",
            "in": "query",
            "description": "Allows detector to skip search for diagonal barcodes.\nSetting it to false will increase detection time but allow to find diagonal barcodes that can be missed otherwise.\nEnabling of diagonal search leads to a bigger detection time.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "ReadTinyBarcodes",
            "in": "query",
            "description": "Allows engine to recognize tiny barcodes on large images. Ignored if AllowIncorrectBarcodes is set to True. Default value: False.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "AustralianPostEncodingTable",
            "in": "query",
            "description": "Interpreting Type for the Customer Information of AustralianPost BarCode.Default is CustomerInformationInterpretingType.Other.",
            "x-schema": {
              "$ref": "#/definitions/CustomerInformationInterpretingType"
            },
            "x-nullable": true,
            "enum": [
              "CTable",
              "NTable",
              "Other"
            ]
          },
          {
            "type": "boolean",
            "name": "IgnoreEndingFillingPatternsForCTable",
            "in": "query",
            "description": "The flag which force AustraliaPost decoder to ignore last filling patterns in Customer Information Field during decoding as CTable method.\nCTable encoding method does not have any gaps in encoding table and sequence \"333\" of filling patterns is decoded as letter \"z\".",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The image storage.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The image folder.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "BarcodeResponseList with barcodes info.",
            "schema": {
              "$ref": "#/definitions/BarcodeResponseList"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "Barcode"
        ],
        "summary": "Recognition of a barcode from file on server with parameters in body.",
        "operationId": "PutBarcodeRecognizeFromBody",
        "parameters": [
          {
            "type": "string",
            "name": "name",
            "in": "path",
            "required": true,
            "description": "The image file name.",
            "x-nullable": false
          },
          {
            "name": "readerParams",
            "in": "body",
            "required": true,
            "description": "BarcodeReader object with parameters.",
            "schema": {
              "$ref": "#/definitions/ReaderParams"
            },
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "type",
            "in": "query",
            "x-schema": {
              "$ref": "#/definitions/DecodeBarcodeType"
            },
            "x-nullable": true,
            "enum": [
              "all",
              "AustraliaPost",
              "Aztec",
              "ISBN",
              "Codabar",
              "Code11",
              "Code128",
              "GS1Code128",
              "Code39Extended",
              "Code39Standard",
              "Code93Extended",
              "Code93Standard",
              "DataMatrix",
              "DeutschePostIdentcode",
              "DeutschePostLeitcode",
              "EAN13",
              "EAN14",
              "EAN8",
              "IATA2of5",
              "Interleaved2of5",
              "ISSN",
              "ISMN",
              "ItalianPost25",
              "ITF14",
              "ITF6",
              "MacroPdf417",
              "Matrix2of5",
              "MSI",
              "OneCode",
              "OPC",
              "PatchCode",
              "Pdf417",
              "MicroPdf417",
              "Planet",
              "Postnet",
              "PZN",
              "QR",
              "MicroQR",
              "RM4SCC",
              "SCC14",
              "SSCC18",
              "Standard2of5",
              "Supplement",
              "UPCA",
              "UPCE",
              "VIN",
              "Pharmacode",
              "GS1DataMatrix",
              "DatabarOmniDirectional",
              "DatabarTruncated",
              "DatabarLimited",
              "DatabarExpanded",
              "SwissPostParcel",
              "AustralianPosteParcel",
              "Code16K",
              "DatabarStackedOmniDirectional",
              "DatabarStacked",
              "DatabarExpandedStacked",
              "CompactPdf417",
              "GS1QR",
              "MaxiCode",
              "MicrE13B",
              "Code32",
              "DataLogic2of5",
              "DotCode",
              "DutchKIX",
              "CodablockF",
              "Mailmark",
              "GS1DotCode",
              "HIBCCode39LIC",
              "HIBCCode128LIC",
              "HIBCAztecLIC",
              "HIBCDataMatrixLIC",
              "HIBCQRLIC",
              "HIBCCode39PAS",
              "HIBCCode128PAS",
              "HIBCAztecPAS",
              "HIBCDataMatrixPAS",
              "HIBCQRPAS",
              "HanXin",
              "GS1HanXin",
              "GS1Aztec",
              "GS1CompositeBar",
              "GS1MicroPdf417",
              "mostCommonlyUsed"
            ]
          },
          {
            "type": "string",
            "name": "storage",
            "in": "query",
            "description": "The storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "folder",
            "in": "query",
            "description": "The image folder.",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "BarcodeResponseList with barcodes info.",
            "schema": {
              "$ref": "#/definitions/BarcodeResponseList"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/recognize": {
      "post": {
        "tags": [
          "Barcode"
        ],
        "summary": "Recognize barcode from an url or from request body.\nRequest body can contain raw data bytes of the image with content-type \"application/octet-stream\".\nAn image can also be passed as a form field.",
        "operationId": "PostBarcodeRecognizeFromUrlOrContent",
        "consumes": [
          "multipart/form-data",
          "application/x-www-form-urlencoded",
          "application/octet-stream"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "Type",
            "in": "query",
            "description": "The type of barcode to read.",
            "x-schema": {
              "$ref": "#/definitions/DecodeBarcodeType"
            },
            "x-nullable": true,
            "enum": [
              "all",
              "AustraliaPost",
              "Aztec",
              "ISBN",
              "Codabar",
              "Code11",
              "Code128",
              "GS1Code128",
              "Code39Extended",
              "Code39Standard",
              "Code93Extended",
              "Code93Standard",
              "DataMatrix",
              "DeutschePostIdentcode",
              "DeutschePostLeitcode",
              "EAN13",
              "EAN14",
              "EAN8",
              "IATA2of5",
              "Interleaved2of5",
              "ISSN",
              "ISMN",
              "ItalianPost25",
              "ITF14",
              "ITF6",
              "MacroPdf417",
              "Matrix2of5",
              "MSI",
              "OneCode",
              "OPC",
              "PatchCode",
              "Pdf417",
              "MicroPdf417",
              "Planet",
              "Postnet",
              "PZN",
              "QR",
              "MicroQR",
              "RM4SCC",
              "SCC14",
              "SSCC18",
              "Standard2of5",
              "Supplement",
              "UPCA",
              "UPCE",
              "VIN",
              "Pharmacode",
              "GS1DataMatrix",
              "DatabarOmniDirectional",
              "DatabarTruncated",
              "DatabarLimited",
              "DatabarExpanded",
              "SwissPostParcel",
              "AustralianPosteParcel",
              "Code16K",
              "DatabarStackedOmniDirectional",
              "DatabarStacked",
              "DatabarExpandedStacked",
              "CompactPdf417",
              "GS1QR",
              "MaxiCode",
              "MicrE13B",
              "Code32",
              "DataLogic2of5",
              "DotCode",
              "DutchKIX",
              "CodablockF",
              "Mailmark",
              "GS1DotCode",
              "HIBCCode39LIC",
              "HIBCCode128LIC",
              "HIBCAztecLIC",
              "HIBCDataMatrixLIC",
              "HIBCQRLIC",
              "HIBCCode39PAS",
              "HIBCCode128PAS",
              "HIBCAztecPAS",
              "HIBCDataMatrixPAS",
              "HIBCQRPAS",
              "HanXin",
              "GS1HanXin",
              "GS1Aztec",
              "GS1CompositeBar",
              "GS1MicroPdf417",
              "mostCommonlyUsed"
            ]
          },
          {
            "type": "array",
            "name": "Types",
            "in": "query",
            "description": "Multiple barcode types to read.",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "$ref": "#/definitions/DecodeBarcodeType"
            }
          },
          {
            "type": "string",
            "name": "ChecksumValidation",
            "in": "query",
            "description": "Enable checksum validation during recognition for 1D barcodes.\nDefault is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.\nChecksum never used: Codabar\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN\nChecksum always used: Rest symbologies",
            "x-schema": {
              "$ref": "#/definitions/ChecksumValidation"
            },
            "x-nullable": true,
            "enum": [
              "Default",
              "On",
              "Off"
            ]
          },
          {
            "type": "boolean",
            "name": "DetectEncoding",
            "in": "query",
            "description": "A flag which force engine to detect codetext encoding for Unicode.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "Preset",
            "in": "query",
            "description": "Preset allows to configure recognition quality and speed manually.\nYou can quickly set up Preset by embedded presets: HighPerformance, NormalQuality,\nHighQuality, MaxBarCodes or you can manually configure separate options.\nDefault value of Preset is NormalQuality.",
            "x-schema": {
              "$ref": "#/definitions/PresetType"
            },
            "x-nullable": true,
            "enum": [
              "HighPerformance",
              "NormalQuality",
              "HighQualityDetection",
              "MaxQualityDetection",
              "HighQuality",
              "MaxBarCodes"
            ]
          },
          {
            "type": "integer",
            "name": "RectX",
            "in": "query",
            "description": "Set X of top left corner of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectY",
            "in": "query",
            "description": "Set Y of top left corner of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectWidth",
            "in": "query",
            "description": "Set Width of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "RectHeight",
            "in": "query",
            "description": "Set Height of area for recognition.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "StripFNC",
            "in": "query",
            "description": "Value indicating whether FNC symbol strip must be done.",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "Timeout",
            "in": "query",
            "description": "Timeout of recognition process in milliseconds.\nDefault value is 15_000 (15 seconds).\nMaximum value is 30_000 (1/2 minute).\nIn case of a timeout RequestTimeout (408) status will be returned.\nTry reducing the image size to avoid timeout.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "integer",
            "name": "MedianSmoothingWindowSize",
            "in": "query",
            "description": "Window size for median smoothing. Typical values are 3 or 4. Default value is 3. AllowMedianSmoothing must be set.",
            "format": "int32",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowMedianSmoothing",
            "in": "query",
            "description": "Allows engine to enable median smoothing as additional scan. Mode helps to recognize noised barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowComplexBackground",
            "in": "query",
            "description": "Allows engine to recognize color barcodes on color background as additional scan. Extremely slow mode.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDatamatrixIndustrialBarcodes",
            "in": "query",
            "description": "Allows engine for Datamatrix to recognize dashed industrial Datamatrix barcodes.\nSlow mode which helps only for dashed barcodes which consist from spots.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDecreasedImage",
            "in": "query",
            "description": "Allows engine to recognize decreased image as additional scan. Size for decreasing is selected by internal engine algorithms.\nMode helps to recognize barcodes which are noised and blurred but captured with high resolution.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowDetectScanGap",
            "in": "query",
            "description": "Allows engine to use gap between scans to increase recognition speed. Mode can make recognition problems with low height barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowIncorrectBarcodes",
            "in": "query",
            "description": "Allows engine to recognize barcodes which has incorrect checksum or incorrect values.\nMode can be used to recognize damaged barcodes with incorrect text.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowInvertImage",
            "in": "query",
            "description": "Allows engine to recognize inverse color image as additional scan. Mode can be used when barcode is white on black background.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowMicroWhiteSpotsRemoving",
            "in": "query",
            "description": "Allows engine for Postal barcodes to recognize slightly noised images. Mode helps to recognize slightly damaged Postal barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowOneDFastBarcodesDetector",
            "in": "query",
            "description": "Allows engine for 1D barcodes to quickly recognize high quality barcodes which fill almost whole image.\nMode helps to quickly recognize generated barcodes from Internet.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowOneDWipedBarsRestoration",
            "in": "query",
            "description": "Allows engine for 1D barcodes to recognize barcodes with single wiped/glued bars in pattern.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowQRMicroQrRestoration",
            "in": "query",
            "description": "Allows engine for QR/MicroQR to recognize damaged MicroQR barcodes.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowRegularImage",
            "in": "query",
            "description": "Allows engine to recognize regular image without any restorations as main scan. Mode to recognize image as is.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowSaltAndPepperFiltering",
            "in": "query",
            "description": "Allows engine to recognize barcodes with salt and pepper noise type. Mode can remove small noise with white and black dots.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowWhiteSpotsRemoving",
            "in": "query",
            "description": "Allows engine to recognize image without small white spots as additional scan. Mode helps to recognize noised image as well as median smoothing filtering.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "CheckMore1DVariants",
            "in": "query",
            "description": "Allows engine to recognize 1D barcodes with checksum by checking more recognition variants. Default value: False.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "FastScanOnly",
            "in": "query",
            "description": "Allows engine for 1D barcodes to quickly recognize middle slice of an image and return result without using any time-consuming algorithms.\nDefault value: False.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "AllowAdditionalRestorations",
            "in": "query",
            "description": "Allows engine using additional image restorations to recognize corrupted barcodes. At this time, it is used only in MicroPdf417 barcode type.\nDefault value: False.",
            "x-nullable": true
          },
          {
            "type": "number",
            "name": "RegionLikelihoodThresholdPercent",
            "in": "query",
            "description": "Sets threshold for detected regions that may contain barcodes.\nValue 0.7 means that bottom 70% of possible regions are filtered out and not processed further.\nRegion likelihood threshold must be between [0.05, 0.9]\nUse high values for clear images with few barcodes.\nUse low values for images with many barcodes or for noisy images.\nLow value may lead to a bigger recognition time.",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "array",
            "name": "ScanWindowSizes",
            "in": "query",
            "description": "Scan window sizes in pixels.\nAllowed sizes are 10, 15, 20, 25, 30.\nScanning with small window size takes more time and provides more accuracy but may fail in detecting very big barcodes.\nCombining of several window sizes can improve detection quality.",
            "collectionFormat": "multi",
            "x-nullable": true,
            "items": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "type": "number",
            "name": "Similarity",
            "in": "query",
            "description": "Similarity coefficient depends on how homogeneous barcodes are.\nUse high value for clear barcodes.\nUse low values to detect barcodes that ara partly damaged or not lighten evenly.\nSimilarity coefficient must be between [0.5, 0.9]",
            "format": "double",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "SkipDiagonalSearch",
            "in": "query",
            "description": "Allows detector to skip search for diagonal barcodes.\nSetting it to false will increase detection time but allow to find diagonal barcodes that can be missed otherwise.\nEnabling of diagonal search leads to a bigger detection time.",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "ReadTinyBarcodes",
            "in": "query",
            "description": "Allows engine to recognize tiny barcodes on large images. Ignored if AllowIncorrectBarcodes is set to True. Default value: False.",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "AustralianPostEncodingTable",
            "in": "query",
            "description": "Interpreting Type for the Customer Information of AustralianPost BarCode.Default is CustomerInformationInterpretingType.Other.",
            "x-schema": {
              "$ref": "#/definitions/CustomerInformationInterpretingType"
            },
            "x-nullable": true,
            "enum": [
              "CTable",
              "NTable",
              "Other"
            ]
          },
          {
            "type": "boolean",
            "name": "IgnoreEndingFillingPatternsForCTable",
            "in": "query",
            "description": "The flag which force AustraliaPost decoder to ignore last filling patterns in Customer Information Field during decoding as CTable method.\nCTable encoding method does not have any gaps in encoding table and sequence \"333\" of filling patterns is decoded as letter \"z\".",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "url",
            "in": "query",
            "description": "The image file url.",
            "x-nullable": true
          },
          {
            "type": "file",
            "name": "image",
            "in": "formData",
            "description": "Image data"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "BarcodeResponseList with barcode data.",
            "schema": {
              "$ref": "#/definitions/BarcodeResponseList"
            }
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/file/{path}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Download file",
        "operationId": "DownloadFile",
        "produces": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to download",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "The raw data of the file.",
            "schema": {
              "type": "file"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "File for given path not found."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ],
        "x-binary-result": true
      },
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Upload file",
        "operationId": "UploadFile",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Path where to upload including filename and extension e.g. /file.ext or /Folder 1/file.ext\n If the content is multipart and path does not contains the file name it tries to get them from filename parameter\n from Content-Disposition header.",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "file",
            "name": "File",
            "in": "formData",
            "required": true,
            "description": "File to upload"
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Empty error list if the upload is successful.",
            "schema": {
              "$ref": "#/definitions/FilesUploadResult"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Delete file",
        "operationId": "DeleteFile",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to delete",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the delete is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/file/copy/{srcPath}": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Copy file",
        "operationId": "CopyFile",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source file path e.g. '/folder/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination file path",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to copy",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the copy is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/file/move/{srcPath}": {
      "put": {
        "tags": [
          "File"
        ],
        "summary": "Move file",
        "operationId": "MoveFile",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source file path e.g. '/src.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination file path e.g. '/dest.ext'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID to move",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the move is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "File for given path not found."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/folder/{path}": {
      "get": {
        "tags": [
          "Folder"
        ],
        "summary": "Get all files and folders within a folder",
        "operationId": "GetFilesList",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Returns all files and folders contained by the folder.",
            "schema": {
              "$ref": "#/definitions/FilesList"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "404": {
            "description": "Can't find folder for given path."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "put": {
        "tags": [
          "Folder"
        ],
        "summary": "Create the folder",
        "operationId": "CreateFolder",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path to create e.g. 'folder_1/folder_2/'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the create is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          },
          "400": {
            "description": "Storage not found or it is not associated with the application."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      },
      "delete": {
        "tags": [
          "Folder"
        ],
        "summary": "Delete folder",
        "operationId": "DeleteFolder",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "Folder path e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "boolean",
            "name": "recursive",
            "in": "query",
            "description": "Enable to delete folders, subfolders and files",
            "default": false,
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the delete is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/folder/copy/{srcPath}": {
      "put": {
        "tags": [
          "Folder"
        ],
        "summary": "Copy folder",
        "operationId": "CopyFolder",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Source folder path e.g. '/src'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination folder path e.g. '/dst'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the copy is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired"
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/folder/move/{srcPath}": {
      "put": {
        "tags": [
          "Folder"
        ],
        "summary": "Move folder",
        "operationId": "MoveFolder",
        "parameters": [
          {
            "type": "string",
            "name": "srcPath",
            "in": "path",
            "required": true,
            "description": "Folder path to move e.g. '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "destPath",
            "in": "query",
            "required": true,
            "description": "Destination folder path to move to e.g '/dst'",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "srcStorageName",
            "in": "query",
            "description": "Source storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "destStorageName",
            "in": "query",
            "description": "Destination storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "description": "Returns 200 if the move is successful."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/{storageName}/exist": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Check if storage exists",
        "operationId": "StorageExists",
        "parameters": [
          {
            "type": "string",
            "name": "storageName",
            "in": "path",
            "required": true,
            "description": "Storage name",
            "x-nullable": false
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Storage exist result.",
            "schema": {
              "$ref": "#/definitions/StorageExist"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/exist/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Check if file or folder exists",
        "operationId": "ObjectExists",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File or folder path e.g. '/file.ext' or '/folder'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          },
          {
            "type": "string",
            "name": "versionId",
            "in": "query",
            "description": "File version ID",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Object exist result.",
            "schema": {
              "$ref": "#/definitions/ObjectExist"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/disc": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get disc usage",
        "operationId": "GetDiscUsage",
        "parameters": [
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "Disc usage.",
            "schema": {
              "$ref": "#/definitions/DiscUsage"
            }
          },
          "400": {
            "description": "Storage not found or it is not associated with an application."
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    },
    "/barcode/storage/version/{path}": {
      "get": {
        "tags": [
          "Storage"
        ],
        "summary": "Get file versions",
        "operationId": "GetFileVersions",
        "parameters": [
          {
            "type": "string",
            "name": "path",
            "in": "path",
            "required": true,
            "description": "File path e.g. '/file.ext'",
            "x-nullable": false
          },
          {
            "type": "string",
            "name": "storageName",
            "in": "query",
            "description": "Storage name",
            "x-nullable": true
          }
        ],
        "responses": {
          "200": {
            "x-nullable": true,
            "description": "File versions.",
            "schema": {
              "$ref": "#/definitions/FileVersions"
            }
          },
          "401": {
            "description": "Authorization token is invalid or expired."
          }
        },
        "security": [
          {
            "JWT": []
          }
        ]
      }
    }
  },
  "definitions": {
    "BarcodeResponseList": {
      "type": "object",
      "description": "Represents information about barcode list.",
      "additionalProperties": false,
      "properties": {
        "Barcodes": {
          "type": "array",
          "description": "List of barcodes which are present in image.",
          "items": {
            "$ref": "#/definitions/BarcodeResponse"
          }
        }
      }
    },
    "BarcodeResponse": {
      "type": "object",
      "description": "Represents information about barcode.",
      "additionalProperties": false,
      "properties": {
        "BarcodeValue": {
          "type": "string",
          "description": "Barcode data."
        },
        "Type": {
          "type": "string",
          "description": "Type of the barcode."
        },
        "Region": {
          "type": "array",
          "description": "Region with barcode.",
          "items": {
            "$ref": "#/definitions/RegionPoint"
          }
        },
        "Checksum": {
          "type": "string",
          "description": "Checksum of barcode."
        }
      }
    },
    "RegionPoint": {
      "type": "object",
      "description": "Wrapper around Drawing.Point for proper specification.",
      "additionalProperties": false,
      "required": [
        "X",
        "Y"
      ],
      "properties": {
        "X": {
          "type": "integer",
          "description": "X-coordinate",
          "format": "int32"
        },
        "Y": {
          "type": "integer",
          "description": "Y-coordinate",
          "format": "int32"
        }
      }
    },
    "ApiErrorResponse": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "RequestId": {
          "type": "string"
        },
        "Error": {
          "$ref": "#/definitions/ApiError"
        }
      }
    },
    "ApiError": {
      "type": "object",
      "additionalProperties": false,
      "properties": {
        "Code": {
          "type": "string"
        },
        "Message": {
          "type": "string"
        },
        "Description": {
          "type": "string"
        },
        "DateTime": {
          "type": "string",
          "format": "date-time"
        },
        "InnerError": {
          "$ref": "#/definitions/ApiError"
        }
      }
    },
    "DecodeBarcodeType": {
      "type": "string",
      "description": "See DecodeType",
      "x-enumNames": [
        "all",
        "AustraliaPost",
        "Aztec",
        "ISBN",
        "Codabar",
        "Code11",
        "Code128",
        "GS1Code128",
        "Code39Extended",
        "Code39Standard",
        "Code93Extended",
        "Code93Standard",
        "DataMatrix",
        "DeutschePostIdentcode",
        "DeutschePostLeitcode",
        "EAN13",
        "EAN14",
        "EAN8",
        "IATA2of5",
        "Interleaved2of5",
        "ISSN",
        "ISMN",
        "ItalianPost25",
        "ITF14",
        "ITF6",
        "MacroPdf417",
        "Matrix2of5",
        "MSI",
        "OneCode",
        "OPC",
        "PatchCode",
        "Pdf417",
        "MicroPdf417",
        "Planet",
        "Postnet",
        "PZN",
        "QR",
        "MicroQR",
        "RM4SCC",
        "SCC14",
        "SSCC18",
        "Standard2of5",
        "Supplement",
        "UPCA",
        "UPCE",
        "VIN",
        "Pharmacode",
        "GS1DataMatrix",
        "DatabarOmniDirectional",
        "DatabarTruncated",
        "DatabarLimited",
        "DatabarExpanded",
        "SwissPostParcel",
        "AustralianPosteParcel",
        "Code16K",
        "DatabarStackedOmniDirectional",
        "DatabarStacked",
        "DatabarExpandedStacked",
        "CompactPdf417",
        "GS1QR",
        "MaxiCode",
        "MicrE13B",
        "Code32",
        "DataLogic2of5",
        "DotCode",
        "DutchKIX",
        "CodablockF",
        "Mailmark",
        "GS1DotCode",
        "HIBCCode39LIC",
        "HIBCCode128LIC",
        "HIBCAztecLIC",
        "HIBCDataMatrixLIC",
        "HIBCQRLIC",
        "HIBCCode39PAS",
        "HIBCCode128PAS",
        "HIBCAztecPAS",
        "HIBCDataMatrixPAS",
        "HIBCQRPAS",
        "HanXin",
        "GS1HanXin",
        "GS1Aztec",
        "GS1CompositeBar",
        "GS1MicroPdf417",
        "mostCommonlyUsed"
      ],
      "enum": [
        "all",
        "AustraliaPost",
        "Aztec",
        "ISBN",
        "Codabar",
        "Code11",
        "Code128",
        "GS1Code128",
        "Code39Extended",
        "Code39Standard",
        "Code93Extended",
        "Code93Standard",
        "DataMatrix",
        "DeutschePostIdentcode",
        "DeutschePostLeitcode",
        "EAN13",
        "EAN14",
        "EAN8",
        "IATA2of5",
        "Interleaved2of5",
        "ISSN",
        "ISMN",
        "ItalianPost25",
        "ITF14",
        "ITF6",
        "MacroPdf417",
        "Matrix2of5",
        "MSI",
        "OneCode",
        "OPC",
        "PatchCode",
        "Pdf417",
        "MicroPdf417",
        "Planet",
        "Postnet",
        "PZN",
        "QR",
        "MicroQR",
        "RM4SCC",
        "SCC14",
        "SSCC18",
        "Standard2of5",
        "Supplement",
        "UPCA",
        "UPCE",
        "VIN",
        "Pharmacode",
        "GS1DataMatrix",
        "DatabarOmniDirectional",
        "DatabarTruncated",
        "DatabarLimited",
        "DatabarExpanded",
        "SwissPostParcel",
        "AustralianPosteParcel",
        "Code16K",
        "DatabarStackedOmniDirectional",
        "DatabarStacked",
        "DatabarExpandedStacked",
        "CompactPdf417",
        "GS1QR",
        "MaxiCode",
        "MicrE13B",
        "Code32",
        "DataLogic2of5",
        "DotCode",
        "DutchKIX",
        "CodablockF",
        "Mailmark",
        "GS1DotCode",
        "HIBCCode39LIC",
        "HIBCCode128LIC",
        "HIBCAztecLIC",
        "HIBCDataMatrixLIC",
        "HIBCQRLIC",
        "HIBCCode39PAS",
        "HIBCCode128PAS",
        "HIBCAztecPAS",
        "HIBCDataMatrixPAS",
        "HIBCQRPAS",
        "HanXin",
        "GS1HanXin",
        "GS1Aztec",
        "GS1CompositeBar",
        "GS1MicroPdf417",
        "mostCommonlyUsed"
      ]
    },
    "EncodeBarcodeType": {
      "type": "string",
      "description": "See EncodeTypes",
      "x-enumNames": [
        "Codabar",
        "Code11",
        "Code39Standard",
        "Code39Extended",
        "Code93Standard",
        "Code93Extended",
        "Code128",
        "GS1Code128",
        "EAN8",
        "EAN13",
        "EAN14",
        "SCC14",
        "SSCC18",
        "UPCA",
        "UPCE",
        "ISBN",
        "ISSN",
        "ISMN",
        "Standard2of5",
        "Interleaved2of5",
        "Matrix2of5",
        "ItalianPost25",
        "IATA2of5",
        "ITF14",
        "ITF6",
        "MSI",
        "VIN",
        "DeutschePostIdentcode",
        "DeutschePostLeitcode",
        "OPC",
        "PZN",
        "Code16K",
        "Pharmacode",
        "DataMatrix",
        "QR",
        "Aztec",
        "Pdf417",
        "MacroPdf417",
        "AustraliaPost",
        "Postnet",
        "Planet",
        "OneCode",
        "RM4SCC",
        "DatabarOmniDirectional",
        "DatabarTruncated",
        "DatabarLimited",
        "DatabarExpanded",
        "SingaporePost",
        "GS1DataMatrix",
        "AustralianPosteParcel",
        "SwissPostParcel",
        "PatchCode",
        "DatabarExpandedStacked",
        "DatabarStacked",
        "DatabarStackedOmniDirectional",
        "MicroPdf417",
        "GS1QR",
        "MaxiCode",
        "Code32",
        "DataLogic2of5",
        "DotCode",
        "DutchKIX",
        "UpcaGs1Code128Coupon",
        "UpcaGs1DatabarCoupon",
        "CodablockF",
        "GS1CodablockF",
        "Mailmark",
        "GS1DotCode",
        "HanXin",
        "GS1HanXin",
        "GS1Aztec",
        "GS1MicroPdf417"
      ],
      "enum": [
        "Codabar",
        "Code11",
        "Code39Standard",
        "Code39Extended",
        "Code93Standard",
        "Code93Extended",
        "Code128",
        "GS1Code128",
        "EAN8",
        "EAN13",
        "EAN14",
        "SCC14",
        "SSCC18",
        "UPCA",
        "UPCE",
        "ISBN",
        "ISSN",
        "ISMN",
        "Standard2of5",
        "Interleaved2of5",
        "Matrix2of5",
        "ItalianPost25",
        "IATA2of5",
        "ITF14",
        "ITF6",
        "MSI",
        "VIN",
        "DeutschePostIdentcode",
        "DeutschePostLeitcode",
        "OPC",
        "PZN",
        "Code16K",
        "Pharmacode",
        "DataMatrix",
        "QR",
        "Aztec",
        "Pdf417",
        "MacroPdf417",
        "AustraliaPost",
        "Postnet",
        "Planet",
        "OneCode",
        "RM4SCC",
        "DatabarOmniDirectional",
        "DatabarTruncated",
        "DatabarLimited",
        "DatabarExpanded",
        "SingaporePost",
        "GS1DataMatrix",
        "AustralianPosteParcel",
        "SwissPostParcel",
        "PatchCode",
        "DatabarExpandedStacked",
        "DatabarStacked",
        "DatabarStackedOmniDirectional",
        "MicroPdf417",
        "GS1QR",
        "MaxiCode",
        "Code32",
        "DataLogic2of5",
        "DotCode",
        "DutchKIX",
        "UpcaGs1Code128Coupon",
        "UpcaGs1DatabarCoupon",
        "CodablockF",
        "GS1CodablockF",
        "Mailmark",
        "GS1DotCode",
        "HanXin",
        "GS1HanXin",
        "GS1Aztec",
        "GS1MicroPdf417"
      ]
    },
    "CodeLocation": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Below",
        "Above",
        "None"
      ],
      "enum": [
        "Below",
        "Above",
        "None"
      ]
    },
    "TextAlignment": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Left",
        "Center",
        "Right"
      ],
      "enum": [
        "Left",
        "Center",
        "Right"
      ]
    },
    "FontMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Manual"
      ],
      "enum": [
        "Auto",
        "Manual"
      ]
    },
    "AvailableGraphicsUnit": {
      "type": "string",
      "description": "Subset of GraphicsUnit.",
      "x-enumNames": [
        "Pixel",
        "Point",
        "Inch",
        "Millimeter"
      ],
      "enum": [
        "Pixel",
        "Point",
        "Inch",
        "Millimeter"
      ]
    },
    "AutoSizeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Nearest",
        "Interpolation"
      ],
      "enum": [
        "None",
        "Nearest",
        "Interpolation"
      ]
    },
    "BorderDashStyle": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Solid",
        "Dash",
        "Dot",
        "DashDot",
        "DashDotDot"
      ],
      "enum": [
        "Solid",
        "Dash",
        "Dot",
        "DashDot",
        "DashDotDot"
      ]
    },
    "EnableChecksum": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Default",
        "Yes",
        "No"
      ],
      "enum": [
        "Default",
        "Yes",
        "No"
      ]
    },
    "ResultImageInfo": {
      "type": "object",
      "description": "Created image info.",
      "additionalProperties": false,
      "required": [
        "FileSize"
      ],
      "properties": {
        "FileSize": {
          "type": "integer",
          "description": "Result file size.",
          "format": "int64"
        },
        "ImageWidth": {
          "type": "integer",
          "description": "Result image width.",
          "format": "int32"
        },
        "ImageHeight": {
          "type": "integer",
          "description": "Result image height.",
          "format": "int32"
        }
      }
    },
    "GeneratorParamsList": {
      "type": "object",
      "description": "Represents list of barcode generators",
      "additionalProperties": false,
      "required": [
        "XStep",
        "YStep"
      ],
      "properties": {
        "BarcodeBuilders": {
          "type": "array",
          "description": "List of barcode generators",
          "items": {
            "$ref": "#/definitions/GeneratorParams"
          }
        },
        "XStep": {
          "type": "integer",
          "description": "Shift step according to X axis",
          "format": "int32"
        },
        "YStep": {
          "type": "integer",
          "description": "Shift step according to Y axis",
          "format": "int32"
        }
      }
    },
    "GeneratorParams": {
      "type": "object",
      "description": "Represents extended BarcodeGenerator params.",
      "additionalProperties": false,
      "required": [
        "TypeOfBarcode",
        "Text"
      ],
      "properties": {
        "TypeOfBarcode": {
          "description": "Type of barcode to generate.",
          "$ref": "#/definitions/EncodeBarcodeType"
        },
        "Text": {
          "type": "string",
          "description": "Text to encode."
        },
        "TwoDDisplayText": {
          "type": "string",
          "description": "Text that will be displayed instead of codetext in 2D barcodes.\nUsed for: Aztec, Pdf417, DataMatrix, QR, MaxiCode, DotCode"
        },
        "TextLocation": {
          "description": "Specify the displaying Text Location, set to CodeLocation.None to hide CodeText.\nDefault value: CodeLocation.Below.",
          "$ref": "#/definitions/CodeLocation"
        },
        "TextAlignment": {
          "description": "Text alignment.",
          "$ref": "#/definitions/TextAlignment"
        },
        "TextColor": {
          "type": "string",
          "description": "Specify the displaying CodeText's Color.\nDefault value: Color.Black."
        },
        "Font": {
          "description": "Specify the displaying Text's font.\nDefault value: Arial 5pt regular.\nIgnored if FontSizeMode is set to FontSizeMode.Auto.",
          "$ref": "#/definitions/FontParams"
        },
        "FontSizeMode": {
          "description": "Specify FontSizeMode. If FontSizeMode is set to Auto, font size will be calculated automatically based on xDimension value.\nIt is recommended to use FontSizeMode.Auto especially in AutoSizeMode.Nearest or AutoSizeMode.Interpolation.\nDefault value: FontSizeMode.Auto.",
          "$ref": "#/definitions/FontMode"
        },
        "NoWrap": {
          "type": "boolean",
          "description": "Specify word wraps (line breaks) within text.\nDefault value: false."
        },
        "Resolution": {
          "type": "number",
          "description": "Resolution of the BarCode image.\nOne value for both dimensions.\nDefault value: 96 dpi.",
          "format": "double"
        },
        "ResolutionX": {
          "type": "number",
          "description": "DEPRECATED: Use 'Resolution' instead.",
          "format": "double"
        },
        "ResolutionY": {
          "type": "number",
          "description": "DEPRECATED: Use 'Resolution' instead.",
          "format": "double"
        },
        "DimensionX": {
          "type": "number",
          "description": "The smallest width of the unit of BarCode bars or spaces.\nIncrease this will increase the whole barcode image width.\nIgnored if AutoSizeMode property is set to AutoSizeMode.Nearest or AutoSizeMode.Interpolation.",
          "format": "double"
        },
        "TextSpace": {
          "type": "number",
          "description": "Space between the CodeText and the BarCode in Unit value.\nDefault value: 2pt.\nIgnored for EAN8, EAN13, UPCE, UPCA, ISBN, ISMN, ISSN, UpcaGs1DatabarCoupon.",
          "format": "double"
        },
        "Units": {
          "description": "Common Units for all measuring in query. Default units: pixel.",
          "$ref": "#/definitions/AvailableGraphicsUnit"
        },
        "SizeMode": {
          "description": "Specifies the different types of automatic sizing modes.\nDefault value: AutoSizeMode.None.",
          "$ref": "#/definitions/AutoSizeMode"
        },
        "BarHeight": {
          "type": "number",
          "description": "Height of the barcode in given units. Default units: pixel.",
          "format": "double"
        },
        "ImageHeight": {
          "type": "number",
          "description": "Height of the barcode image in given units. Default units: pixel.",
          "format": "double"
        },
        "ImageWidth": {
          "type": "number",
          "description": "Width of the barcode image in given units. Default units: pixel.",
          "format": "double"
        },
        "RotationAngle": {
          "type": "number",
          "description": "BarCode image rotation angle, measured in degree, e.g. RotationAngle = 0 or RotationAngle = 360 means no rotation.\nIf RotationAngle NOT equal to 90, 180, 270 or 0, it may increase the difficulty for the scanner to read the image.\nDefault value: 0.",
          "format": "double"
        },
        "Padding": {
          "description": "Barcode paddings.\nDefault value: 5pt 5pt 5pt 5pt.",
          "$ref": "#/definitions/Padding"
        },
        "CaptionAbove": {
          "description": "Additional caption above barcode.",
          "$ref": "#/definitions/CaptionParams"
        },
        "CaptionBelow": {
          "description": "Additional caption below barcode.",
          "$ref": "#/definitions/CaptionParams"
        },
        "BackColor": {
          "type": "string",
          "description": "Background color of the barcode image.\nDefault value: Color.White."
        },
        "BarColor": {
          "type": "string",
          "description": "Bars color.\nDefault value: Color.Black."
        },
        "BorderColor": {
          "type": "string",
          "description": "Border color.\nDefault value: Color.Black."
        },
        "BorderWidth": {
          "type": "number",
          "description": "Border width.\nDefault value: 0.\nIgnored if Visible is set to false.",
          "format": "double"
        },
        "BorderDashStyle": {
          "description": "Border dash style.\nDefault value: BorderDashStyle.Solid.",
          "$ref": "#/definitions/BorderDashStyle"
        },
        "BorderVisible": {
          "type": "boolean",
          "description": "Border visibility. If false than parameter Width is always ignored (0).\nDefault value: false."
        },
        "EnableChecksum": {
          "description": "Enable checksum during generation 1D barcodes.\nDefault is treated as Yes for symbology which must contain checksum, as No where checksum only possible.\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN, Codabar\nChecksum always used: Rest symbology",
          "$ref": "#/definitions/EnableChecksum"
        },
        "EnableEscape": {
          "type": "boolean",
          "description": "Indicates whether explains the character \"\\\" as an escape character in CodeText property. Used for Pdf417, DataMatrix, Code128 only\nIf the EnableEscape is true, \"\\\" will be explained as a special escape character. Otherwise, \"\\\" acts as normal characters.\nAspose.BarCode supports input decimal ascii code and mnemonic for ASCII control-code characters. For example, \\013 and \\\\CR stands for CR."
        },
        "FilledBars": {
          "type": "boolean",
          "description": "Value indicating whether bars are filled.\nOnly for 1D barcodes.\nDefault value: true."
        },
        "AlwaysShowChecksum": {
          "type": "boolean",
          "description": "Always display checksum digit in the human readable text for Code128 and GS1Code128 barcodes."
        },
        "WideNarrowRatio": {
          "type": "number",
          "description": "Wide bars to Narrow bars ratio.\nDefault value: 3, that is, wide bars are 3 times as wide as narrow bars.\nUsed for ITF, PZN, PharmaCode, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, IATA2of5, VIN, DeutschePost, OPC, Code32, DataLogic2of5, PatchCode, Code39Extended, Code39Standard",
          "format": "double"
        },
        "ValidateText": {
          "type": "boolean",
          "description": "Only for 1D barcodes.\nIf codetext is incorrect and value set to true - exception will be thrown. Otherwise codetext will be corrected to match barcode's specification.\nException always will be thrown for: Databar symbology if codetext is incorrect.\nException always will not be thrown for: AustraliaPost, SingaporePost, Code39Extended, Code93Extended, Code16K, Code128 symbology if codetext is incorrect."
        },
        "SupplementData": {
          "type": "string",
          "description": "Supplement parameters.\nUsed for Interleaved2of5, Standard2of5, EAN13, EAN8, UPCA, UPCE, ISBN, ISSN, ISMN."
        },
        "SupplementSpace": {
          "type": "number",
          "description": "Space between main the BarCode and supplement BarCode.",
          "format": "double"
        },
        "BarWidthReduction": {
          "type": "number",
          "description": "Bars reduction value that is used to compensate ink spread while printing.",
          "format": "double"
        },
        "UseAntiAlias": {
          "type": "boolean",
          "description": "Indicates whether is used anti-aliasing mode to render image. Anti-aliasing mode is applied to barcode and text drawing."
        },
        "AustralianPost": {
          "description": "AustralianPost params.",
          "$ref": "#/definitions/AustralianPostParams"
        },
        "Aztec": {
          "description": "Aztec params.",
          "$ref": "#/definitions/AztecParams"
        },
        "Codabar": {
          "description": "Codabar params.",
          "$ref": "#/definitions/CodabarParams"
        },
        "Codablock": {
          "description": "Codablock params.",
          "$ref": "#/definitions/CodablockParams"
        },
        "Code16K": {
          "description": "Code16K params.",
          "$ref": "#/definitions/Code16KParams"
        },
        "Coupon": {
          "description": "Coupon params.",
          "$ref": "#/definitions/CouponParams"
        },
        "DataBar": {
          "description": "DataBar params.",
          "$ref": "#/definitions/DataBarParams"
        },
        "DataMatrix": {
          "description": "DataMatrix params.",
          "$ref": "#/definitions/DataMatrixParams"
        },
        "DotCode": {
          "description": "DotCode params.",
          "$ref": "#/definitions/DotCodeParams"
        },
        "ITF": {
          "description": "ITF params.",
          "$ref": "#/definitions/ITFParams"
        },
        "MaxiCode": {
          "description": "MaxiCode params.",
          "$ref": "#/definitions/MaxiCodeParams"
        },
        "Pdf417": {
          "description": "Pdf417 params.",
          "$ref": "#/definitions/Pdf417Params"
        },
        "Postal": {
          "description": "Postal params.",
          "$ref": "#/definitions/PostalParams"
        },
        "QR": {
          "description": "QR params.",
          "$ref": "#/definitions/QrParams"
        },
        "PatchCode": {
          "description": "PatchCode params.",
          "$ref": "#/definitions/PatchCodeParams"
        },
        "Code128": {
          "description": "Code128 params.",
          "$ref": "#/definitions/Code128Params"
        },
        "HanXin": {
          "description": "HanXin params.",
          "$ref": "#/definitions/HanXinParams"
        }
      }
    },
    "FontParams": {
      "type": "object",
      "description": "Font.",
      "additionalProperties": false,
      "properties": {
        "Family": {
          "type": "string",
          "description": "Font family."
        },
        "Size": {
          "type": "number",
          "description": "Font size in units.",
          "format": "double"
        },
        "Style": {
          "description": "Font style.",
          "$ref": "#/definitions/FontStyle"
        }
      }
    },
    "FontStyle": {
      "type": "string",
      "description": "",
      "x-enumFlags": true,
      "x-enumNames": [
        "Regular",
        "Bold",
        "Italic",
        "Underline",
        "Strikeout"
      ],
      "enum": [
        "Regular",
        "Bold",
        "Italic",
        "Underline",
        "Strikeout"
      ]
    },
    "Padding": {
      "type": "object",
      "description": "Padding around barcode.",
      "additionalProperties": false,
      "properties": {
        "Left": {
          "type": "number",
          "description": "Left padding.",
          "format": "double"
        },
        "Right": {
          "type": "number",
          "description": "Right padding.",
          "format": "double"
        },
        "Top": {
          "type": "number",
          "description": "Top padding.",
          "format": "double"
        },
        "Bottom": {
          "type": "number",
          "description": "Bottom padding.",
          "format": "double"
        }
      }
    },
    "CaptionParams": {
      "type": "object",
      "description": "Caption",
      "additionalProperties": false,
      "properties": {
        "Text": {
          "type": "string",
          "description": "Caption text."
        },
        "Alignment": {
          "description": "Text alignment.",
          "$ref": "#/definitions/TextAlignment"
        },
        "Color": {
          "type": "string",
          "description": "Text color."
        },
        "Visible": {
          "type": "boolean",
          "description": "Is caption visible."
        },
        "Font": {
          "description": "Font.",
          "$ref": "#/definitions/FontParams"
        },
        "Padding": {
          "description": "Padding.",
          "$ref": "#/definitions/Padding"
        },
        "NoWrap": {
          "type": "boolean",
          "description": "Specify word wraps (line breaks) within text.\nDefault value: false."
        }
      }
    },
    "AustralianPostParams": {
      "type": "object",
      "description": "AustralianPost barcode parameters.",
      "additionalProperties": false,
      "properties": {
        "EncodingTable": {
          "description": "Interpreting type for the Customer Information of AustralianPost, default to CustomerInformationInterpretingType.Other",
          "$ref": "#/definitions/CustomerInformationInterpretingType"
        },
        "ShortBarHeight": {
          "type": "number",
          "description": "Short bar's height of AustralianPost barcode.",
          "format": "double"
        }
      }
    },
    "CustomerInformationInterpretingType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "CTable",
        "NTable",
        "Other"
      ],
      "enum": [
        "CTable",
        "NTable",
        "Other"
      ]
    },
    "AztecParams": {
      "type": "object",
      "description": "Aztec parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "ErrorLevel": {
          "type": "integer",
          "description": "Level of error correction of Aztec types of barcode.\nValue should between 10 to 95.",
          "format": "int32"
        },
        "SymbolMode": {
          "description": "Aztec Symbol mode.\nDefault value: AztecSymbolMode.Auto.",
          "$ref": "#/definitions/AztecSymbolMode"
        },
        "TextEncoding": {
          "type": "string",
          "description": "DEPRECATED: This property is obsolete and will be removed in future releases. Unicode symbols detection and encoding will be processed in Auto mode with Extended Channel Interpretation charset designator. Using of own encodings requires manual CodeText encoding into byte[] array.\n Sets the encoding of codetext."
        },
        "EncodeMode": {
          "description": "Encoding mode for Aztec barcodes.\nDefault value: Auto",
          "$ref": "#/definitions/AztecEncodeMode"
        },
        "ECIEncoding": {
          "description": "Identifies ECI encoding. Used when AztecEncodeMode is Auto. Default value: ISO-8859-1.",
          "$ref": "#/definitions/ECIEncodings"
        },
        "IsReaderInitialization": {
          "type": "boolean",
          "description": "Used to instruct the reader to interpret the data contained within the symbol\nas programming for reader initialization."
        },
        "LayersCount": {
          "type": "integer",
          "description": "Gets or sets layers count of Aztec symbol. Layers count should be in range from\n1 to 3 for Compact mode and in range from 1 to 32 for Full Range mode. Default\nvalue: 0 (auto).",
          "format": "int32"
        }
      }
    },
    "AztecSymbolMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Compact",
        "FullRange",
        "Rune"
      ],
      "enum": [
        "Auto",
        "Compact",
        "FullRange",
        "Rune"
      ]
    },
    "AztecEncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ],
      "enum": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ]
    },
    "ECIEncodings": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "NONE",
        "ISO_8859_1",
        "ISO_8859_2",
        "ISO_8859_3",
        "ISO_8859_4",
        "ISO_8859_5",
        "ISO_8859_6",
        "ISO_8859_7",
        "ISO_8859_8",
        "ISO_8859_9",
        "ISO_8859_10",
        "ISO_8859_11",
        "ISO_8859_13",
        "ISO_8859_14",
        "ISO_8859_15",
        "ISO_8859_16",
        "Shift_JIS",
        "Win1250",
        "Win1251",
        "Win1252",
        "Win1256",
        "UTF16BE",
        "UTF8",
        "US_ASCII",
        "Big5",
        "GB18030",
        "EUC_KR"
      ],
      "enum": [
        "NONE",
        "ISO_8859_1",
        "ISO_8859_2",
        "ISO_8859_3",
        "ISO_8859_4",
        "ISO_8859_5",
        "ISO_8859_6",
        "ISO_8859_7",
        "ISO_8859_8",
        "ISO_8859_9",
        "ISO_8859_10",
        "ISO_8859_11",
        "ISO_8859_13",
        "ISO_8859_14",
        "ISO_8859_15",
        "ISO_8859_16",
        "Shift_JIS",
        "Win1250",
        "Win1251",
        "Win1252",
        "Win1256",
        "UTF16BE",
        "UTF8",
        "US_ASCII",
        "Big5",
        "GB18030",
        "EUC_KR"
      ]
    },
    "CodabarParams": {
      "type": "object",
      "description": "Codabar parameters.",
      "additionalProperties": false,
      "properties": {
        "ChecksumMode": {
          "description": "Checksum algorithm for Codabar barcodes.\nDefault value: CodabarChecksumMode.Mod16.\nTo enable checksum calculation set value EnableChecksum.Yes to property EnableChecksum.",
          "$ref": "#/definitions/CodabarChecksumMode"
        },
        "StartSymbol": {
          "description": "Start symbol (character) of Codabar symbology.\nDefault value: CodabarSymbol.A",
          "$ref": "#/definitions/CodabarSymbol"
        },
        "StopSymbol": {
          "description": "Stop symbol (character) of Codabar symbology.\nDefault value: CodabarSymbol.A",
          "$ref": "#/definitions/CodabarSymbol"
        }
      }
    },
    "CodabarChecksumMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Mod10",
        "Mod16"
      ],
      "enum": [
        "Mod10",
        "Mod16"
      ]
    },
    "CodabarSymbol": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "A",
        "B",
        "C",
        "D"
      ],
      "enum": [
        "A",
        "B",
        "C",
        "D"
      ]
    },
    "CodablockParams": {
      "type": "object",
      "description": "Codablock parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "Columns": {
          "type": "integer",
          "description": "Columns count.",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "description": "Rows count.",
          "format": "int32"
        }
      }
    },
    "Code16KParams": {
      "type": "object",
      "description": "Code16K parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "QuietZoneLeftCoef": {
          "type": "integer",
          "description": "Size of the left quiet zone in xDimension.\nDefault value: 10, meaning if xDimension = 2px than left quiet zone will be 20px.",
          "format": "int32"
        },
        "QuietZoneRightCoef": {
          "type": "integer",
          "description": "Size of the right quiet zone in xDimension.\nDefault value: 1, meaning if xDimension = 2px than right quiet zone will be 2px.",
          "format": "int32"
        }
      }
    },
    "CouponParams": {
      "type": "object",
      "description": "Coupon parameters. Used for UpcaGs1DatabarCoupon, UpcaGs1Code128Coupon.",
      "additionalProperties": false,
      "properties": {
        "SupplementSpace": {
          "type": "number",
          "description": "Space between main the BarCode and supplement BarCode in Unit value.",
          "format": "double"
        }
      }
    },
    "DataBarParams": {
      "type": "object",
      "description": "Databar parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.\nUsed for DataBar stacked.",
          "format": "double"
        },
        "Columns": {
          "type": "integer",
          "description": "Columns count.",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "description": "Rows count.",
          "format": "int32"
        },
        "Is2DCompositeComponent": {
          "type": "boolean",
          "description": "Enables flag of 2D composite component with DataBar barcode"
        },
        "IsAllowOnlyGS1Encoding": {
          "type": "boolean",
          "description": "If this flag is set, it allows only GS1 encoding standard for Databar barcode types"
        }
      }
    },
    "DataMatrixParams": {
      "type": "object",
      "description": "DataMatrix parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module",
          "format": "double"
        },
        "TextEncoding": {
          "type": "string",
          "description": "DEPRECATED: This property is obsolete and will be removed in future releases. Unicode symbols detection and encoding will be processed in Auto mode with Extended Channel Interpretation charset designator. Using of own encodings requires manual CodeText encoding into byte[] array.\n Sets the encoding of codetext."
        },
        "Columns": {
          "type": "integer",
          "description": "DEPRECATED: Will be replaced with 'DataMatrix.Version' in the next release\n Columns count.",
          "format": "int32"
        },
        "DataMatrixEcc": {
          "description": "Datamatrix ECC type.\nDefault value: DataMatrixEccType.Ecc200.",
          "$ref": "#/definitions/DataMatrixEccType"
        },
        "DataMatrixEncodeMode": {
          "description": "Encode mode of Datamatrix barcode.\nDefault value: DataMatrixEncodeMode.Auto.",
          "$ref": "#/definitions/DataMatrixEncodeMode"
        },
        "Rows": {
          "type": "integer",
          "description": "DEPRECATED: Will be replaced with 'DataMatrix.Version' in the next release\n Rows count.",
          "format": "int32"
        },
        "MacroCharacters": {
          "description": "Macro Characters 05 and 06 values are used to obtain more compact encoding in special modes.\nCan be used only with DataMatrixEccType.Ecc200 or DataMatrixEccType.EccAuto.\nCannot be used with EncodeTypes.GS1DataMatrix\nDefault value: MacroCharacters.None.",
          "$ref": "#/definitions/MacroCharacter"
        },
        "Version": {
          "description": "Sets a Datamatrix symbol size.\nDefault value: DataMatrixVersion.Auto.",
          "$ref": "#/definitions/DataMatrixVersion"
        }
      }
    },
    "DataMatrixEccType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "EccAuto",
        "Ecc000",
        "Ecc050",
        "Ecc080",
        "Ecc100",
        "Ecc140",
        "Ecc200"
      ],
      "enum": [
        "EccAuto",
        "Ecc000",
        "Ecc050",
        "Ecc080",
        "Ecc100",
        "Ecc140",
        "Ecc200"
      ]
    },
    "DataMatrixEncodeMode": {
      "type": "string",
      "description": "DataMatrix encoder's encoding mode, default to Auto",
      "x-enumNames": [
        "Auto",
        "ASCII",
        "Full",
        "Custom",
        "C40",
        "Text",
        "EDIFACT",
        "ANSIX12",
        "ExtendedCodetext"
      ],
      "enum": [
        "Auto",
        "ASCII",
        "Full",
        "Custom",
        "C40",
        "Text",
        "EDIFACT",
        "ANSIX12",
        "ExtendedCodetext"
      ]
    },
    "MacroCharacter": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Macro05",
        "Macro06"
      ],
      "enum": [
        "None",
        "Macro05",
        "Macro06"
      ]
    },
    "DataMatrixVersion": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "RowsColumns",
        "ECC000_9x9",
        "ECC000_050_11x11",
        "ECC000_100_13x13",
        "ECC000_100_15x15",
        "ECC000_140_17x17",
        "ECC000_140_19x19",
        "ECC000_140_21x21",
        "ECC000_140_23x23",
        "ECC000_140_25x25",
        "ECC000_140_27x27",
        "ECC000_140_29x29",
        "ECC000_140_31x31",
        "ECC000_140_33x33",
        "ECC000_140_35x35",
        "ECC000_140_37x37",
        "ECC000_140_39x39",
        "ECC000_140_41x41",
        "ECC000_140_43x43",
        "ECC000_140_45x45",
        "ECC000_140_47x47",
        "ECC000_140_49x49",
        "ECC200_10x10",
        "ECC200_12x12",
        "ECC200_14x14",
        "ECC200_16x16",
        "ECC200_18x18",
        "ECC200_20x20",
        "ECC200_22x22",
        "ECC200_24x24",
        "ECC200_26x26",
        "ECC200_32x32",
        "ECC200_36x36",
        "ECC200_40x40",
        "ECC200_44x44",
        "ECC200_48x48",
        "ECC200_52x52",
        "ECC200_64x64",
        "ECC200_72x72",
        "ECC200_80x80",
        "ECC200_88x88",
        "ECC200_96x96",
        "ECC200_104x104",
        "ECC200_120x120",
        "ECC200_132x132",
        "ECC200_144x144",
        "ECC200_8x18",
        "ECC200_8x32",
        "ECC200_12x26",
        "ECC200_12x36",
        "ECC200_16x36",
        "ECC200_16x48",
        "DMRE_8x48",
        "DMRE_8x64",
        "DMRE_8x80",
        "DMRE_8x96",
        "DMRE_8x120",
        "DMRE_8x144",
        "DMRE_12x64",
        "DMRE_12x88",
        "DMRE_16x64",
        "DMRE_20x36",
        "DMRE_20x44",
        "DMRE_20x64",
        "DMRE_22x48",
        "DMRE_24x48",
        "DMRE_24x64",
        "DMRE_26x40",
        "DMRE_26x48",
        "DMRE_26x64"
      ],
      "enum": [
        "Auto",
        "RowsColumns",
        "ECC000_9x9",
        "ECC000_050_11x11",
        "ECC000_100_13x13",
        "ECC000_100_15x15",
        "ECC000_140_17x17",
        "ECC000_140_19x19",
        "ECC000_140_21x21",
        "ECC000_140_23x23",
        "ECC000_140_25x25",
        "ECC000_140_27x27",
        "ECC000_140_29x29",
        "ECC000_140_31x31",
        "ECC000_140_33x33",
        "ECC000_140_35x35",
        "ECC000_140_37x37",
        "ECC000_140_39x39",
        "ECC000_140_41x41",
        "ECC000_140_43x43",
        "ECC000_140_45x45",
        "ECC000_140_47x47",
        "ECC000_140_49x49",
        "ECC200_10x10",
        "ECC200_12x12",
        "ECC200_14x14",
        "ECC200_16x16",
        "ECC200_18x18",
        "ECC200_20x20",
        "ECC200_22x22",
        "ECC200_24x24",
        "ECC200_26x26",
        "ECC200_32x32",
        "ECC200_36x36",
        "ECC200_40x40",
        "ECC200_44x44",
        "ECC200_48x48",
        "ECC200_52x52",
        "ECC200_64x64",
        "ECC200_72x72",
        "ECC200_80x80",
        "ECC200_88x88",
        "ECC200_96x96",
        "ECC200_104x104",
        "ECC200_120x120",
        "ECC200_132x132",
        "ECC200_144x144",
        "ECC200_8x18",
        "ECC200_8x32",
        "ECC200_12x26",
        "ECC200_12x36",
        "ECC200_16x36",
        "ECC200_16x48",
        "DMRE_8x48",
        "DMRE_8x64",
        "DMRE_8x80",
        "DMRE_8x96",
        "DMRE_8x120",
        "DMRE_8x144",
        "DMRE_12x64",
        "DMRE_12x88",
        "DMRE_16x64",
        "DMRE_20x36",
        "DMRE_20x44",
        "DMRE_20x64",
        "DMRE_22x48",
        "DMRE_24x48",
        "DMRE_24x64",
        "DMRE_26x40",
        "DMRE_26x48",
        "DMRE_26x64"
      ]
    },
    "DotCodeParams": {
      "type": "object",
      "description": "DotCode parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "Columns": {
          "type": "integer",
          "description": "Identifies columns count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of columns must be at least 5.",
          "format": "int32"
        },
        "EncodeMode": {
          "description": "Identifies DotCode encode mode. Default value: Auto.",
          "$ref": "#/definitions/DotCodeEncodeMode"
        },
        "ECIEncoding": {
          "description": "Identifies ECI encoding. Used when DotCodeEncodeMode is Auto. Default value: ISO-8859-1.",
          "$ref": "#/definitions/ECIEncodings"
        },
        "IsReaderInitialization": {
          "type": "boolean",
          "description": "Indicates whether code is used for instruct reader to interpret the following data as instructions for initialization or reprogramming of the bar code reader. Default value is false."
        },
        "Rows": {
          "type": "integer",
          "description": "Identifies rows count. Sum of the number of rows plus the number of columns of a DotCode symbol must be odd. Number of rows must be at least 5.",
          "format": "int32"
        }
      }
    },
    "DotCodeEncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ],
      "enum": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ]
    },
    "ITFParams": {
      "type": "object",
      "description": "ITF parameters.",
      "additionalProperties": false,
      "properties": {
        "BorderThickness": {
          "type": "number",
          "description": "ITF border (bearer bar) thickness in Unit value.\nDefault value: 12pt.",
          "format": "double"
        },
        "BorderType": {
          "description": "Border type of ITF barcode.\nDefault value: ITF14BorderType.Bar.",
          "$ref": "#/definitions/ITF14BorderType"
        },
        "QuietZoneCoef": {
          "type": "integer",
          "description": "Size of the quiet zones in xDimension.\nDefault value: 10, meaning if xDimension = 2px than quiet zones will be 20px.",
          "format": "int32"
        }
      }
    },
    "ITF14BorderType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "None",
        "Frame",
        "Bar",
        "FrameOut",
        "BarOut"
      ],
      "enum": [
        "None",
        "Frame",
        "Bar",
        "FrameOut",
        "BarOut"
      ]
    },
    "MaxiCodeParams": {
      "type": "object",
      "description": "MaxiCode parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "Mode": {
          "description": "Mode for MaxiCode barcodes.",
          "$ref": "#/definitions/MaxiCodeMode"
        },
        "EncodeMode": {
          "description": "Encoding mode for MaxiCode barcodes.",
          "$ref": "#/definitions/MaxiCodeEncodeMode"
        }
      }
    },
    "MaxiCodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Mode2",
        "Mode3",
        "Mode4",
        "Mode5",
        "Mode6"
      ],
      "enum": [
        "Mode2",
        "Mode3",
        "Mode4",
        "Mode5",
        "Mode6"
      ]
    },
    "MaxiCodeEncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ],
      "enum": [
        "Auto",
        "Bytes",
        "ExtendedCodetext"
      ]
    },
    "Pdf417Params": {
      "type": "object",
      "description": "PDF417 parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "TextEncoding": {
          "type": "string",
          "description": "DEPRECATED: This property is obsolete and will be removed in future releases. Unicode symbols detection and encoding will be processed in Auto mode with Extended Channel Interpretation charset designator. Using of own encodings requires manual CodeText encoding into byte[] array.\n Sets the encoding of codetext."
        },
        "Columns": {
          "type": "integer",
          "description": "Columns count.",
          "format": "int32"
        },
        "CompactionMode": {
          "description": "Pdf417 symbology type of BarCode's compaction mode.\nDefault value: Pdf417CompactionMode.Auto.",
          "$ref": "#/definitions/Pdf417CompactionMode"
        },
        "ErrorLevel": {
          "description": "Pdf417 symbology type of BarCode's error correction level\nranging from level0 to level8, level0 means no error correction info,\nlevel8 means best error correction which means a larger picture.",
          "$ref": "#/definitions/Pdf417ErrorLevel"
        },
        "MacroFileID": {
          "type": "integer",
          "description": "Macro Pdf417 barcode's file ID.\nUsed for MacroPdf417.",
          "format": "int32"
        },
        "MacroSegmentID": {
          "type": "integer",
          "description": "Macro Pdf417 barcode's segment ID, which starts from 0, to MacroSegmentsCount - 1.",
          "format": "int32"
        },
        "MacroSegmentsCount": {
          "type": "integer",
          "description": "Macro Pdf417 barcode segments count.",
          "format": "int32"
        },
        "Rows": {
          "type": "integer",
          "description": "Rows count.",
          "format": "int32"
        },
        "Truncate": {
          "type": "boolean",
          "description": "Whether Pdf417 symbology type of BarCode is truncated (to reduce space)."
        },
        "Pdf417ECIEncoding": {
          "description": "Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details\nabout the used references for encoding the data in the symbol.\nCurrent implementation consists all well known charset encodings.",
          "$ref": "#/definitions/ECIEncodings"
        },
        "IsReaderInitialization": {
          "type": "boolean",
          "description": "Used to instruct the reader to interpret the data contained within the symbol\nas programming for reader initialization"
        },
        "MacroTimeStamp": {
          "type": "string",
          "description": "Macro Pdf417 barcode time stamp",
          "format": "date-time"
        },
        "MacroSender": {
          "type": "string",
          "description": "Macro Pdf417 barcode sender name"
        },
        "MacroFileSize": {
          "type": "integer",
          "description": "Macro Pdf417 file size.\nThe file size field contains the size in bytes of the entire source file",
          "format": "int32"
        },
        "MacroChecksum": {
          "type": "integer",
          "description": "Macro Pdf417 barcode checksum.\nThe checksum field contains the value of the 16-bit (2 bytes) CRC checksum using the CCITT-16 polynomial",
          "format": "int32"
        },
        "MacroFileName": {
          "type": "string",
          "description": "Macro Pdf417 barcode file name"
        },
        "MacroAddressee": {
          "type": "string",
          "description": "Macro Pdf417 barcode addressee name"
        },
        "MacroECIEncoding": {
          "description": "Extended Channel Interpretation Identifiers. Applies for Macro PDF417 text fields.",
          "$ref": "#/definitions/ECIEncodings"
        },
        "Code128Emulation": {
          "description": "DEPRECATED: This property is obsolete and will be removed in future releases. See samples of using new parameters on https://releases.aspose.com/barcode/net/release-notes/2023/aspose-barcode-for-net-23-10-release-notes/\nFunction codeword for Code 128 emulation. Applied for MicroPDF417 only. Ignored for PDF417 and MacroPDF417 barcodes.",
          "$ref": "#/definitions/Code128Emulation"
        },
        "IsCode128Emulation": {
          "type": "boolean",
          "description": "Can be used only with MicroPdf417 and encodes Code 128 emulation modes.\nCan encode FNC1 in second position modes 908 and 909,\nalso can encode 910 and 911 which just indicate that recognized MicroPdf417 can be interpret as Code 128."
        },
        "Pdf417MacroTerminator": {
          "description": "Used to tell the encoder whether to add Macro PDF417 Terminator (codeword 922) to the segment.\nApplied only for Macro PDF417.",
          "$ref": "#/definitions/Pdf417MacroTerminator"
        },
        "IsLinked": {
          "type": "boolean",
          "description": "Defines linked modes with GS1MicroPdf417, MicroPdf417 and Pdf417 barcodes.\nWith GS1MicroPdf417 symbology encodes 906, 907, 912, 913, 914, 915 “Linked” UCC/EAN-128 modes.\nWith MicroPdf417 and Pdf417 symbologies encodes 918 linkage flag to associated linear component other than an EAN.UCC."
        },
        "MacroCharacters": {
          "description": "Macro Characters 05 and 06 values are used to obtain more compact encoding in special modes.\nCan be used only with MicroPdf417 and encodes 916 and 917 MicroPdf417 modes.\nDefault value: MacroCharacters.None.",
          "$ref": "#/definitions/MacroCharacter"
        }
      }
    },
    "Pdf417CompactionMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Text",
        "Numeric",
        "Binary"
      ],
      "enum": [
        "Auto",
        "Text",
        "Numeric",
        "Binary"
      ]
    },
    "Pdf417ErrorLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Level0",
        "Level1",
        "Level2",
        "Level3",
        "Level4",
        "Level5",
        "Level6",
        "Level7",
        "Level8"
      ],
      "enum": [
        "Level0",
        "Level1",
        "Level2",
        "Level3",
        "Level4",
        "Level5",
        "Level6",
        "Level7",
        "Level8"
      ]
    },
    "Code128Emulation": {
      "type": "string",
      "description": "DEPRECATED. This enum will be removed in future releases\nFunction codewords for Code 128 emulation. Applied for MicroPDF417 only. Ignored\nfor PDF417 and MacroPDF417 barcodes.",
      "x-enumNames": [
        "None",
        "Code903",
        "Code904",
        "Code905"
      ],
      "enum": [
        "None",
        "Code903",
        "Code904",
        "Code905"
      ]
    },
    "Pdf417MacroTerminator": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "None",
        "Set"
      ],
      "enum": [
        "Auto",
        "None",
        "Set"
      ]
    },
    "PostalParams": {
      "type": "object",
      "description": "Postal parameters. Used for Postnet, Planet.",
      "additionalProperties": false,
      "properties": {
        "ShortBarHeight": {
          "type": "number",
          "description": "Short bar's height of Postal barcodes.",
          "format": "double"
        }
      }
    },
    "QrParams": {
      "type": "object",
      "description": "QR parameters.",
      "additionalProperties": false,
      "properties": {
        "AspectRatio": {
          "type": "number",
          "description": "Height/Width ratio of 2D BarCode module.",
          "format": "double"
        },
        "TextEncoding": {
          "type": "string",
          "description": "DEPRECATED: This property is obsolete and will be removed in future releases. Unicode symbols detection and encoding will be processed in Auto mode with Extended Channel Interpretation charset designator. Using of own encodings requires manual CodeText encoding into byte[] array.\n Sets the encoding of codetext."
        },
        "EncodeType": {
          "description": "QR / MicroQR selector mode. Select ForceQR for standard QR symbols, Auto for MicroQR.",
          "$ref": "#/definitions/QREncodeType"
        },
        "ECIEncoding": {
          "description": "Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details\nabout the used references for encoding the data in the symbol.\nCurrent implementation consists all well known charset encodings.",
          "$ref": "#/definitions/ECIEncodings"
        },
        "EncodeMode": {
          "description": "QR symbology type of BarCode's encoding mode.\nDefault value: QREncodeMode.Auto.",
          "$ref": "#/definitions/QREncodeMode"
        },
        "ErrorLevel": {
          "description": "Level of Reed-Solomon error correction for QR barcode.\nFrom low to high: LevelL, LevelM, LevelQ, LevelH. see QRErrorLevel.",
          "$ref": "#/definitions/QRErrorLevel"
        },
        "Version": {
          "description": "Version of QR Code.\nFrom Version1 to Version40 for QR code and from M1 to M4 for MicroQr.\nDefault value is QRVersion.Auto.",
          "$ref": "#/definitions/QRVersion"
        },
        "StructuredAppend": {
          "description": "QR structured append parameters.",
          "$ref": "#/definitions/StructuredAppend"
        }
      }
    },
    "QREncodeType": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "ForceQR",
        "ForceMicroQR"
      ],
      "enum": [
        "Auto",
        "ForceQR",
        "ForceMicroQR"
      ]
    },
    "QREncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Bytes",
        "Utf8BOM",
        "Utf16BEBOM",
        "ECIEncoding",
        "ExtendedCodetext"
      ],
      "enum": [
        "Auto",
        "Bytes",
        "Utf8BOM",
        "Utf16BEBOM",
        "ECIEncoding",
        "ExtendedCodetext"
      ]
    },
    "QRErrorLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "LevelL",
        "LevelM",
        "LevelQ",
        "LevelH"
      ],
      "enum": [
        "LevelL",
        "LevelM",
        "LevelQ",
        "LevelH"
      ]
    },
    "QRVersion": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Version01",
        "Version02",
        "Version03",
        "Version04",
        "Version05",
        "Version06",
        "Version07",
        "Version08",
        "Version09",
        "Version10",
        "Version11",
        "Version12",
        "Version13",
        "Version14",
        "Version15",
        "Version16",
        "Version17",
        "Version18",
        "Version19",
        "Version20",
        "Version21",
        "Version22",
        "Version23",
        "Version24",
        "Version25",
        "Version26",
        "Version27",
        "Version28",
        "Version29",
        "Version30",
        "Version31",
        "Version32",
        "Version33",
        "Version34",
        "Version35",
        "Version36",
        "Version37",
        "Version38",
        "Version39",
        "Version40",
        "VersionM1",
        "VersionM2",
        "VersionM3",
        "VersionM4"
      ],
      "enum": [
        "Auto",
        "Version01",
        "Version02",
        "Version03",
        "Version04",
        "Version05",
        "Version06",
        "Version07",
        "Version08",
        "Version09",
        "Version10",
        "Version11",
        "Version12",
        "Version13",
        "Version14",
        "Version15",
        "Version16",
        "Version17",
        "Version18",
        "Version19",
        "Version20",
        "Version21",
        "Version22",
        "Version23",
        "Version24",
        "Version25",
        "Version26",
        "Version27",
        "Version28",
        "Version29",
        "Version30",
        "Version31",
        "Version32",
        "Version33",
        "Version34",
        "Version35",
        "Version36",
        "Version37",
        "Version38",
        "Version39",
        "Version40",
        "VersionM1",
        "VersionM2",
        "VersionM3",
        "VersionM4"
      ]
    },
    "StructuredAppend": {
      "type": "object",
      "description": "QR structured append parameters.",
      "additionalProperties": false,
      "properties": {
        "SequenceIndicator": {
          "type": "integer",
          "description": "The index of the QR structured append mode barcode. Index starts from 0.",
          "format": "int32"
        },
        "TotalCount": {
          "type": "integer",
          "description": "QR structured append mode barcodes quantity. Max value is 16.",
          "format": "int32"
        },
        "ParityByte": {
          "type": "integer",
          "description": "QR structured append mode parity data.",
          "format": "byte"
        }
      }
    },
    "PatchCodeParams": {
      "type": "object",
      "description": "PatchCode parameters.",
      "additionalProperties": false,
      "properties": {
        "ExtraBarcodeText": {
          "type": "string",
          "description": "Specifies codetext for an extra QR barcode, when PatchCode is generated in page mode."
        },
        "PatchFormat": {
          "description": "PatchCode format. Choose PatchOnly to generate single PatchCode. Use page format to generate Patch page with PatchCodes as borders.\nDefault value: PatchFormat.PatchOnly",
          "$ref": "#/definitions/PatchFormat"
        }
      }
    },
    "PatchFormat": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "PatchOnly",
        "A4",
        "A4_LANDSCAPE",
        "US_Letter",
        "US_Letter_LANDSCAPE"
      ],
      "enum": [
        "PatchOnly",
        "A4",
        "A4_LANDSCAPE",
        "US_Letter",
        "US_Letter_LANDSCAPE"
      ]
    },
    "Code128Params": {
      "type": "object",
      "description": "Code128 params.",
      "additionalProperties": false,
      "properties": {
        "EncodeMode": {
          "description": "Encoding mode for Code128 barcodes. Code 128 specification\nDefault value: Code128EncodeMode.Auto.",
          "$ref": "#/definitions/Code128EncodeMode"
        }
      }
    },
    "Code128EncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "CodeA",
        "CodeB",
        "CodeAB",
        "CodeC",
        "CodeAC",
        "CodeBC"
      ],
      "enum": [
        "Auto",
        "CodeA",
        "CodeB",
        "CodeAB",
        "CodeC",
        "CodeAC",
        "CodeBC"
      ]
    },
    "HanXinParams": {
      "type": "object",
      "description": "HanXin params.",
      "additionalProperties": false,
      "properties": {
        "EncodeMode": {
          "description": "Encoding mode for XanXin barcodes.\nDefault value: HanXinEncodeMode.Auto.",
          "$ref": "#/definitions/HanXinEncodeMode"
        },
        "ErrorLevel": {
          "description": "Allowed Han Xin error correction levels from L1 to L4.\nDefault value: HanXinErrorLevel.L1.",
          "$ref": "#/definitions/HanXinErrorLevel"
        },
        "Version": {
          "description": "Allowed Han Xin versions, Auto and Version01 - Version84.\nDefault value: HanXinVersion.Auto.",
          "$ref": "#/definitions/HanXinVersion"
        },
        "ECIEncoding": {
          "description": "Extended Channel Interpretation Identifiers. It is used to tell the barcode reader details\nabout the used references for encoding the data in the symbol.\nCurrent implementation consists all well known charset encodings.\nDefault value: ECIEncodings.ISO_8859_1",
          "$ref": "#/definitions/ECIEncodings"
        }
      }
    },
    "HanXinEncodeMode": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Binary",
        "ECI",
        "Unicode",
        "URI",
        "Extended"
      ],
      "enum": [
        "Auto",
        "Binary",
        "ECI",
        "Unicode",
        "URI",
        "Extended"
      ]
    },
    "HanXinErrorLevel": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "L1",
        "L2",
        "L3",
        "L4"
      ],
      "enum": [
        "L1",
        "L2",
        "L3",
        "L4"
      ]
    },
    "HanXinVersion": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Auto",
        "Version01",
        "Version02",
        "Version03",
        "Version04",
        "Version05",
        "Version06",
        "Version07",
        "Version08",
        "Version09",
        "Version10",
        "Version11",
        "Version12",
        "Version13",
        "Version14",
        "Version15",
        "Version16",
        "Version17",
        "Version18",
        "Version19",
        "Version20",
        "Version21",
        "Version22",
        "Version23",
        "Version24",
        "Version25",
        "Version26",
        "Version27",
        "Version28",
        "Version29",
        "Version30",
        "Version31",
        "Version32",
        "Version33",
        "Version34",
        "Version35",
        "Version36",
        "Version37",
        "Version38",
        "Version39",
        "Version40",
        "Version41",
        "Version42",
        "Version43",
        "Version44",
        "Version45",
        "Version46",
        "Version47",
        "Version48",
        "Version49",
        "Version50",
        "Version51",
        "Version52",
        "Version53",
        "Version54",
        "Version55",
        "Version56",
        "Version57",
        "Version58",
        "Version59",
        "Version60",
        "Version61",
        "Version62",
        "Version63",
        "Version64",
        "Version65",
        "Version66",
        "Version67",
        "Version68",
        "Version69",
        "Version70",
        "Version71",
        "Version72",
        "Version73",
        "Version74",
        "Version75",
        "Version76",
        "Version77",
        "Version78",
        "Version79",
        "Version80",
        "Version81",
        "Version82",
        "Version83",
        "Version84"
      ],
      "enum": [
        "Auto",
        "Version01",
        "Version02",
        "Version03",
        "Version04",
        "Version05",
        "Version06",
        "Version07",
        "Version08",
        "Version09",
        "Version10",
        "Version11",
        "Version12",
        "Version13",
        "Version14",
        "Version15",
        "Version16",
        "Version17",
        "Version18",
        "Version19",
        "Version20",
        "Version21",
        "Version22",
        "Version23",
        "Version24",
        "Version25",
        "Version26",
        "Version27",
        "Version28",
        "Version29",
        "Version30",
        "Version31",
        "Version32",
        "Version33",
        "Version34",
        "Version35",
        "Version36",
        "Version37",
        "Version38",
        "Version39",
        "Version40",
        "Version41",
        "Version42",
        "Version43",
        "Version44",
        "Version45",
        "Version46",
        "Version47",
        "Version48",
        "Version49",
        "Version50",
        "Version51",
        "Version52",
        "Version53",
        "Version54",
        "Version55",
        "Version56",
        "Version57",
        "Version58",
        "Version59",
        "Version60",
        "Version61",
        "Version62",
        "Version63",
        "Version64",
        "Version65",
        "Version66",
        "Version67",
        "Version68",
        "Version69",
        "Version70",
        "Version71",
        "Version72",
        "Version73",
        "Version74",
        "Version75",
        "Version76",
        "Version77",
        "Version78",
        "Version79",
        "Version80",
        "Version81",
        "Version82",
        "Version83",
        "Version84"
      ]
    },
    "ChecksumValidation": {
      "type": "string",
      "description": "",
      "x-enumNames": [
        "Default",
        "On",
        "Off"
      ],
      "enum": [
        "Default",
        "On",
        "Off"
      ]
    },
    "PresetType": {
      "type": "string",
      "description": "See QualitySettings\nallows to configure recognition quality and speed manually.",
      "x-enumNames": [
        "HighPerformance",
        "NormalQuality",
        "HighQualityDetection",
        "MaxQualityDetection",
        "HighQuality",
        "MaxBarCodes"
      ],
      "enum": [
        "HighPerformance",
        "NormalQuality",
        "HighQualityDetection",
        "MaxQualityDetection",
        "HighQuality",
        "MaxBarCodes"
      ]
    },
    "ReaderParams": {
      "type": "object",
      "description": "Represents BarcodeReader object.",
      "additionalProperties": false,
      "properties": {
        "Type": {
          "description": "The type of barcode to read.",
          "$ref": "#/definitions/DecodeBarcodeType"
        },
        "Types": {
          "type": "array",
          "description": "Multiple barcode types to read.",
          "items": {
            "$ref": "#/definitions/DecodeBarcodeType"
          }
        },
        "ChecksumValidation": {
          "description": "Enable checksum validation during recognition for 1D barcodes.\nDefault is treated as Yes for symbologies which must contain checksum, as No where checksum only possible.\nChecksum never used: Codabar\nChecksum is possible: Code39 Standard/Extended, Standard2of5, Interleaved2of5, Matrix2of5, ItalianPost25, DeutschePostIdentcode, DeutschePostLeitcode, VIN\nChecksum always used: Rest symbologies",
          "$ref": "#/definitions/ChecksumValidation"
        },
        "DetectEncoding": {
          "type": "boolean",
          "description": "A flag which force engine to detect codetext encoding for Unicode."
        },
        "Preset": {
          "description": "Preset allows to configure recognition quality and speed manually.\nYou can quickly set up Preset by embedded presets: HighPerformance, NormalQuality,\nHighQuality, MaxBarCodes or you can manually configure separate options.\nDefault value of Preset is NormalQuality.",
          "$ref": "#/definitions/PresetType"
        },
        "RectX": {
          "type": "integer",
          "description": "Set X of top left corner of area for recognition.",
          "format": "int32"
        },
        "RectY": {
          "type": "integer",
          "description": "Set Y of top left corner of area for recognition.",
          "format": "int32"
        },
        "RectWidth": {
          "type": "integer",
          "description": "Set Width of area for recognition.",
          "format": "int32"
        },
        "RectHeight": {
          "type": "integer",
          "description": "Set Height of area for recognition.",
          "format": "int32"
        },
        "StripFNC": {
          "type": "boolean",
          "description": "Value indicating whether FNC symbol strip must be done."
        },
        "Timeout": {
          "type": "integer",
          "description": "Timeout of recognition process in milliseconds.\nDefault value is 15_000 (15 seconds).\nMaximum value is 30_000 (1/2 minute).\nIn case of a timeout RequestTimeout (408) status will be returned.\nTry reducing the image size to avoid timeout.",
          "format": "int32"
        },
        "MedianSmoothingWindowSize": {
          "type": "integer",
          "description": "Window size for median smoothing. Typical values are 3 or 4. Default value is 3. AllowMedianSmoothing must be set.",
          "format": "int32"
        },
        "AllowMedianSmoothing": {
          "type": "boolean",
          "description": "Allows engine to enable median smoothing as additional scan. Mode helps to recognize noised barcodes."
        },
        "AllowComplexBackground": {
          "type": "boolean",
          "description": "Allows engine to recognize color barcodes on color background as additional scan. Extremely slow mode."
        },
        "AllowDatamatrixIndustrialBarcodes": {
          "type": "boolean",
          "description": "Allows engine for Datamatrix to recognize dashed industrial Datamatrix barcodes.\nSlow mode which helps only for dashed barcodes which consist from spots."
        },
        "AllowDecreasedImage": {
          "type": "boolean",
          "description": "Allows engine to recognize decreased image as additional scan. Size for decreasing is selected by internal engine algorithms.\nMode helps to recognize barcodes which are noised and blurred but captured with high resolution."
        },
        "AllowDetectScanGap": {
          "type": "boolean",
          "description": "Allows engine to use gap between scans to increase recognition speed. Mode can make recognition problems with low height barcodes."
        },
        "AllowIncorrectBarcodes": {
          "type": "boolean",
          "description": "Allows engine to recognize barcodes which has incorrect checksum or incorrect values.\nMode can be used to recognize damaged barcodes with incorrect text."
        },
        "AllowInvertImage": {
          "type": "boolean",
          "description": "Allows engine to recognize inverse color image as additional scan. Mode can be used when barcode is white on black background."
        },
        "AllowMicroWhiteSpotsRemoving": {
          "type": "boolean",
          "description": "Allows engine for Postal barcodes to recognize slightly noised images. Mode helps to recognize slightly damaged Postal barcodes."
        },
        "AllowOneDFastBarcodesDetector": {
          "type": "boolean",
          "description": "Allows engine for 1D barcodes to quickly recognize high quality barcodes which fill almost whole image.\nMode helps to quickly recognize generated barcodes from Internet."
        },
        "AllowOneDWipedBarsRestoration": {
          "type": "boolean",
          "description": "Allows engine for 1D barcodes to recognize barcodes with single wiped/glued bars in pattern."
        },
        "AllowQRMicroQrRestoration": {
          "type": "boolean",
          "description": "Allows engine for QR/MicroQR to recognize damaged MicroQR barcodes."
        },
        "AllowRegularImage": {
          "type": "boolean",
          "description": "Allows engine to recognize regular image without any restorations as main scan. Mode to recognize image as is."
        },
        "AllowSaltAndPepperFiltering": {
          "type": "boolean",
          "description": "Allows engine to recognize barcodes with salt and pepper noise type. Mode can remove small noise with white and black dots."
        },
        "AllowWhiteSpotsRemoving": {
          "type": "boolean",
          "description": "Allows engine to recognize image without small white spots as additional scan. Mode helps to recognize noised image as well as median smoothing filtering."
        },
        "CheckMore1DVariants": {
          "type": "boolean",
          "description": "Allows engine to recognize 1D barcodes with checksum by checking more recognition variants. Default value: False."
        },
        "FastScanOnly": {
          "type": "boolean",
          "description": "Allows engine for 1D barcodes to quickly recognize middle slice of an image and return result without using any time-consuming algorithms.\nDefault value: False."
        },
        "AllowAdditionalRestorations": {
          "type": "boolean",
          "description": "Allows engine using additional image restorations to recognize corrupted barcodes. At this time, it is used only in MicroPdf417 barcode type.\nDefault value: False."
        },
        "RegionLikelihoodThresholdPercent": {
          "type": "number",
          "description": "Sets threshold for detected regions that may contain barcodes.\nValue 0.7 means that bottom 70% of possible regions are filtered out and not processed further.\nRegion likelihood threshold must be between [0.05, 0.9]\nUse high values for clear images with few barcodes.\nUse low values for images with many barcodes or for noisy images.\nLow value may lead to a bigger recognition time.",
          "format": "double"
        },
        "ScanWindowSizes": {
          "type": "array",
          "description": "Scan window sizes in pixels.\nAllowed sizes are 10, 15, 20, 25, 30.\nScanning with small window size takes more time and provides more accuracy but may fail in detecting very big barcodes.\nCombining of several window sizes can improve detection quality.",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "Similarity": {
          "type": "number",
          "description": "Similarity coefficient depends on how homogeneous barcodes are.\nUse high value for clear barcodes.\nUse low values to detect barcodes that ara partly damaged or not lighten evenly.\nSimilarity coefficient must be between [0.5, 0.9]",
          "format": "double"
        },
        "SkipDiagonalSearch": {
          "type": "boolean",
          "description": "Allows detector to skip search for diagonal barcodes.\nSetting it to false will increase detection time but allow to find diagonal barcodes that can be missed otherwise.\nEnabling of diagonal search leads to a bigger detection time."
        },
        "ReadTinyBarcodes": {
          "type": "boolean",
          "description": "Allows engine to recognize tiny barcodes on large images. Ignored if AllowIncorrectBarcodes is set to True. Default value: False."
        },
        "AustralianPostEncodingTable": {
          "description": "Interpreting Type for the Customer Information of AustralianPost BarCode.Default is CustomerInformationInterpretingType.Other.",
          "$ref": "#/definitions/CustomerInformationInterpretingType"
        },
        "IgnoreEndingFillingPatternsForCTable": {
          "type": "boolean",
          "description": "The flag which force AustraliaPost decoder to ignore last filling patterns in Customer Information Field during decoding as CTable method.\nCTable encoding method does not have any gaps in encoding table and sequence \"333\" of filling patterns is decoded as letter \"z\"."
        }
      }
    },
    "FilesUploadResult": {
      "type": "object",
      "description": "File upload result",
      "additionalProperties": false,
      "properties": {
        "Uploaded": {
          "type": "array",
          "description": "List of uploaded file names",
          "items": {
            "type": "string"
          }
        },
        "Errors": {
          "type": "array",
          "description": "List of errors.",
          "items": {
            "$ref": "#/definitions/Error"
          }
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "Error",
      "additionalProperties": false,
      "properties": {
        "Code": {
          "type": "string",
          "description": "Code"
        },
        "Message": {
          "type": "string",
          "description": "Message"
        },
        "Description": {
          "type": "string",
          "description": "Description"
        },
        "InnerError": {
          "description": "Inner Error",
          "$ref": "#/definitions/ErrorDetails"
        }
      }
    },
    "ErrorDetails": {
      "type": "object",
      "description": "The error details",
      "additionalProperties": false,
      "required": [
        "Date"
      ],
      "properties": {
        "RequestId": {
          "type": "string",
          "description": "The request id"
        },
        "Date": {
          "type": "string",
          "description": "Date",
          "format": "date-time"
        }
      }
    },
    "FilesList": {
      "type": "object",
      "description": "Files list",
      "additionalProperties": false,
      "properties": {
        "Value": {
          "type": "array",
          "description": "Files and folders contained by folder StorageFile.",
          "items": {
            "$ref": "#/definitions/StorageFile"
          }
        }
      }
    },
    "StorageFile": {
      "type": "object",
      "description": "File or folder information",
      "additionalProperties": false,
      "required": [
        "IsFolder",
        "Size"
      ],
      "properties": {
        "Name": {
          "type": "string",
          "description": "File or folder name."
        },
        "IsFolder": {
          "type": "boolean",
          "description": "True if it is a folder."
        },
        "ModifiedDate": {
          "type": "string",
          "description": "File or folder last modified DateTime.",
          "format": "date-time"
        },
        "Size": {
          "type": "integer",
          "description": "File or folder size.",
          "format": "int64"
        },
        "Path": {
          "type": "string",
          "description": "File or folder path."
        }
      }
    },
    "StorageExist": {
      "type": "object",
      "description": "Storage exists",
      "additionalProperties": false,
      "required": [
        "Exists"
      ],
      "properties": {
        "Exists": {
          "type": "boolean",
          "description": "Shows that the storage exists."
        }
      }
    },
    "ObjectExist": {
      "type": "object",
      "description": "Object exists",
      "additionalProperties": false,
      "required": [
        "Exists",
        "IsFolder"
      ],
      "properties": {
        "Exists": {
          "type": "boolean",
          "description": "Indicates that the file or folder exists."
        },
        "IsFolder": {
          "type": "boolean",
          "description": "True if it is a folder, false if it is a file."
        }
      }
    },
    "DiscUsage": {
      "type": "object",
      "description": "Class for disc space information.",
      "additionalProperties": false,
      "required": [
        "UsedSize",
        "TotalSize"
      ],
      "properties": {
        "UsedSize": {
          "type": "integer",
          "description": "Application used disc space.",
          "format": "int64"
        },
        "TotalSize": {
          "type": "integer",
          "description": "Total disc space.",
          "format": "int64"
        }
      }
    },
    "FileVersions": {
      "type": "object",
      "description": "File versions FileVersion.",
      "additionalProperties": false,
      "properties": {
        "Value": {
          "type": "array",
          "description": "File versions FileVersion.",
          "items": {
            "$ref": "#/definitions/FileVersion"
          }
        }
      }
    },
    "FileVersion": {
      "allOf": [
        {
          "$ref": "#/definitions/StorageFile"
        },
        {
          "type": "object",
          "description": "File Version",
          "additionalProperties": false,
          "required": [
            "IsLatest"
          ],
          "properties": {
            "VersionId": {
              "type": "string",
              "description": "File Version ID."
            },
            "IsLatest": {
              "type": "boolean",
              "description": "Specifies whether the file is (true) or is not (false) the latest version of an file."
            }
          }
        }
      ]
    }
  },
  "securityDefinitions": {
    "JWT": {
      "type": "oauth2",
      "flow": "application",
      "tokenUrl": "https://api.aspose.cloud/connect/token"
    }
  }
}