<?php declare(strict_types=1);
{{>licenseInfo}}

namespace Aspose\BarCode;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\GuzzleException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Aspose\BarCode\Requests;
use InvalidArgumentException;
use RuntimeException;

/**
 * Aspose.BarCode for Cloud API.
 */

{{#operations}}class {{classname}}
{
    /**
     * Stores client instance
     * @var ClientInterface client for calling api
     */
    protected $client;

    /**
     * Stores configuration
     * @var Configuration configuration info
     */
    protected $config;

    /**
     * Stores header selector
     * HeaderSelector class for header selection
     */
    protected $headerSelector;

    /**
     * Initialize a new instance of Api
     * @param ClientInterface|null $client client for calling api
     * @param Configuration|null $config configuration info
     * @param HeaderSelector|null $selector class for header selection
     */
    public function __construct(ClientInterface $client = null, Configuration $config = null, HeaderSelector $selector = null)
    {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * Gets the config
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

{{#operation}}
    /**
     * Operation {{{operationId}}}
{{#summary}}
     *
     * {{{summary}}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param Requests\{{operationId}}Request $request is a request object for operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}}
     */
    public function {{operationId}}(Requests\{{operationId}}Request $request)
    {
        try {
            {{#returnType}}list($response) = {{/returnType}}$this->{{operationId}}WithHttpInfo($request);{{#returnType}}
            return $response;{{/returnType}}
        } catch (RepeatRequestException $e) {
            {{#returnType}}list($response) = {{/returnType}}$this->{{operationId}}WithHttpInfo($request);{{#returnType}}
            return $response;{{/returnType}}
        }
    }

    /**
     * Operation {{{operationId}}}WithHttpInfo
{{#summary}}
     *
     * {{{summary}}}
{{/summary}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param Requests\{{operationId}}Request $request is a request object for operation
     *
     * @throws ApiException on non-2xx response
     * @throws InvalidArgumentException
     * @return array of {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}null{{/returnType}}, HTTP status code, HTTP response headers (array of strings)
     */
    public function {{operationId}}WithHttpInfo(Requests\{{operationId}}Request $request)
    {
        $returnType = '{{returnType}}';
        $request = $this->{{operationId}}Request($request);

        try {
            $options = $this->_createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                if ($statusCode === 401) {
                    $this->_requestToken();
                    throw new RepeatRequestException('Request must be retried', $statusCode, $response->getHeaders(), $response->getBody());
                }

                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            {{#returnType}}
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            if ($this->config->getDebug()) {
                $this->_writeResponseLog($statusCode, $response->getHeaders(), ObjectSerializer::deserialize($content, $returnType, []));
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
            {{/returnType}}
            {{^returnType}}
            return [null, $statusCode, $response->getHeaders()];
            {{/returnType}}
        } catch (ApiException $e) {
            switch ($e->getCode()) {
        {{#responses}}
            {{#dataType}}
                {{^isWildcard}}case {{code}}:{{/isWildcard}}{{#isWildcard}}default:{{/isWildcard}}
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '{{dataType}}', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            {{/dataType}}
        {{/responses}}
            }
            throw $e;
        }
    }

    /**
     * Operation {{{operationId}}}Async
     *
     * {{{summary}}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param Requests\{{operationId}}Request $request is a request object for operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function {{operationId}}Async(Requests\{{operationId}}Request $request)
    {
        return $this->{{operationId}}AsyncWithHttpInfo($request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation {{{operationId}}}AsyncWithHttpInfo
     *
     * {{{summary}}}
     *
{{#description}}
     * {{.}}
     *
{{/description}}
     * @param Requests\{{operationId}}Request $request is a request object for operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function {{operationId}}AsyncWithHttpInfo(Requests\{{operationId}}Request $request)
    {
        $returnType = '{{returnType}}';
        $request = $this->{{operationId}}Request($request);

        return $this->client
            ->sendAsync($request, $this->_createHttpClientOption())
            ->then(
                function ($response) {{^returnType}} { {{/returnType}}{{#returnType}} use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    if ($this->config->getDebug()) {
                        $this->_writeResponseLog($response->getStatusCode(), $response->getHeaders(), ObjectSerializer::deserialize($content, $returnType, []));
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                    {{/returnType}}
                    {{^returnType}}
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                    {{/returnType}}
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    if ($exception instanceof RepeatRequestException) {
                        //$this->_refreshToken();
                        throw new RepeatRequestException('Request must be retried', $statusCode, $response->getHeaders(), $response->getBody());
                    }

                    throw new ApiException(
                        sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation '{{{operationId}}}'
     *
     * @param Requests\{{operationId}}Request $request is a request object for operation
     *
     * @throws InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function {{operationId}}Request(Requests\{{operationId}}Request $request)
    {
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (!isset($request->{{paramName}})) {
            throw new InvalidArgumentException('Missing the required parameter ${{paramName}} when calling {{operationId}}');
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if (isset({{^required}}$request->{{paramName}) && {{/required}}strlen($request->{{paramName}}) > {{maxLength}}) {
            throw new InvalidArgumentException("invalid length for \"$request->{{paramName}}\" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.");
        }
        {{/maxLength}}
        {{#minLength}}
        if (isset({{^required}}$request->{{paramName}}) && {{/required}}strlen($request->{{paramName}}) < {{minLength}}) {
            throw new InvalidArgumentException("invalid length for \"${{paramName}}\" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.");
        }
        {{/minLength}}
        {{#maximum}}
        if (isset({{^required}}$request->{{paramName}}) && {{/required}}$request->{{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new InvalidArgumentException("invalid value for \"${{paramName}}\" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.");
        }
        {{/maximum}}
        {{#minimum}}
        if (isset({{^required}}$request->{{paramName}}) && {{/required}}$request->{{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new InvalidArgumentException("invalid value for \"${{paramName}}\" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.");
        }
        {{/minimum}}
        {{#pattern}}
        if (isset({{^required}}$request->{{paramName}}) && {{/required}}!preg_match('{{{pattern}}}', $request->{{paramName}})) {
            throw new InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if (isset({{^required}}${{paramName}}) && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new InvalidArgumentException("invalid value for \"${{paramName}}\" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.");
        }
        {{/maxItems}}
        {{#minItems}}
        if (isset({{^required}}$request->{{paramName}}) && {{/required}}count($request->{{paramName}}) < {{minItems}}) {
            throw new InvalidArgumentException("invalid value for \"${{paramName}}\" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.");
        }
        {{/minItems}}

        {{/hasValidation}}
        {{/allParams}}

        $resourcePath = '{{path}}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;
    {{#pathParams}}
        {{#collectionFormat}}
        if (is_array($request->{{paramName}})) {
            $request->{{paramName}} = ObjectSerializer::serializeCollection($request->{{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (isset($request->{{paramName}})) {
            $localName = lcfirst('{{baseName}}');
            $resourcePath = str_replace('{' . $localName . '}', ObjectSerializer::toPathValue($request->{{paramName}}), $resourcePath);
        }
    {{/pathParams}}
    {{#queryParams}}
        {{#collectionFormat}}
        if (is_array($request->{{paramName}})) {
            $queryParamName = lcfirst('{{baseName}}');
            $queryParams[$queryParamName] = $request->{{paramName}};
        }
        {{/collectionFormat}}
        {{^collectionFormat}}
        if (isset($request->{{paramName}})) {
            $queryParamName = lcfirst('{{baseName}}');
            $queryParamValue = is_bool($request->{{paramName}}) ? ($request->{{paramName}} ? 'true' : 'false') : $request->{{paramName}};
            if (strpos($resourcePath, '{' . $queryParamName . '}') !== false) {
                $resourcePath = str_replace('{' . $queryParamName . '}', ObjectSerializer::toPathValue($queryParamValue), $resourcePath);
            } else {
                $queryParams[$queryParamName] = ObjectSerializer::toQueryValue($queryParamValue);
            }
        }
        {{/collectionFormat}}
    {{/queryParams}}
    {{#headerParams}}
        // header params
        {{#collectionFormat}}
        if (is_array($request->{{paramName}})) {
            $request->{{paramName}} = ObjectSerializer::serializeCollection($request->{{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (isset($request->{{paramName}})) {
            $headerParams['{{paramName}}'] = ObjectSerializer::toHeaderValue($request->{{paramName}});
        }
    {{/headerParams}}

        $resourcePath = $this->_parseURL($resourcePath, $queryParams);

        {{#formParams}}
        {{#-first}}// form params{{/-first}}
        {{#isFile}}
        $multipart = true;
        $filename = ObjectSerializer::toFormValue($request->{{paramName}});
        $handle = fopen($filename, 'rb');
        $fsize = filesize($filename);
        $contents = fread($handle, $fsize);
        $formParams['{{baseName}}'][] = $contents;
        {{/isFile}}
        {{^isFile}}
            {{#isCollectionFormatMulti}}
            foreach($request->{{paramName}} as $item) {
                $formParams['{{baseName}}'][] = ObjectSerializer::toFormValue($item);
            }
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
            {{/isCollectionFormatMulti}}
            {{^isCollectionFormatMulti}}
            if (isset($request->{{paramName}})) {
                $formParams['{{baseName}}'][] = ObjectSerializer::toFormValue($request->{{paramName}});
            }
            {{/isCollectionFormatMulti}}
        {{/isFile}}
        {{/formParams}}
        // body params
        $_tempBody = null;
        {{#bodyParams}}
        if (isset($request->{{paramName}})) {
            if (is_string($request->{{paramName}})) {
                $_tempBody = "\"" . $request->{{paramName}} . "\"";
            } else {
                $_tempBody = $request->{{paramName}};
            }
        }
        {{/bodyParams}}

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [{{#produces}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/produces}}],
                [{{#consumes}}'{{{mediaType}}}'{{#hasMore}}, {{/hasMore}}{{/consumes}}]
            );
        }

        // for model (json/xml)
        {{#hasBodyParam}}
        // $_tempBody is the method argument, if present
        $httpBody = $_tempBody;
        // \stdClass has no __toString(), so we should encode it manually
        if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($httpBody);
        }
        {{/hasBodyParam}}
        {{#hasFormParams}}
        if ($multipart) {
            $multipartContents = [];
            foreach ($formParams as $formParamName => $formParamValues) {
                foreach ($formParamValues as $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue,
                        'filename' => $filename
                    ];
                }
            }
            // for HTTP post (form)
            $httpBody = new MultipartStream($multipartContents);

        } elseif ($headers['Content-Type'] === 'application/json') {
            $httpBody = \GuzzleHttp\json_encode($formParams);

        }{{#formParams}}{{#isFile}} else {
            // for HTTP post (form)
            $httpBody = $formParams['{{baseName}}'][0];
        }{{/isFile}}{{/formParams}}
        {{/hasFormParams}}

        if (!$this->config->getAccessToken()) {
            $this->_requestToken();
        }
        $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['x-aspose-client'] = $this->config->getUserAgent();
        }

        $defaultHeaders['x-aspose-client-version'] = $this->config->getClientVersion();

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $req = new Request(
            '{{httpMethod}}',
            $this->config->getHost() . $resourcePath,
            $headers,
            $httpBody
        );
        if ($this->config->getDebug()) {
            $this->_writeRequestLog('{{httpMethod}}', $this->config->getHost() . $resourcePath, $headers, $httpBody);
        }

        return $req;
    }

    {{/operation}}
    /**
     * Create http client option
     *
     * @throws RuntimeException on file opening failure
     * @return array of http client options
     */
    private function _createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }

    /**
     * Executes response logging
     */
    private function _writeResponseLog($statusCode, $headers, $body)
    {
        $logInfo = "\nResponse: $statusCode \n";
        echo $logInfo . $this->_writeHeadersAndBody($logInfo, $headers, $body);
    }

    /**
     * Executes request logging
     */
    private function _writeRequestLog($method, $url, $headers, $body)
    {
        $logInfo = "\n$method: $url \n";
        echo $logInfo . $this->_writeHeadersAndBody($logInfo, $headers, $body);
    }

    /**
     * Executes header and boy formatting
     */
    private function _writeHeadersAndBody($logInfo, $headers, $body)
    {
        foreach ($headers as $name => $value) {
            $logInfo .= $name . ': ' . $value . '\n';
        }

        return $logInfo .= 'Body: ' . $body . '\n';
    }

    /**
     * Executes url parsing
     */
    private function _parseURL($url, $queryParams)
    {
        // parse the url
        $UrlToSign = trim($url, '/');
        $urlQuery = preg_replace('/%5B[0-9]+%5D=/', '=', http_build_query($queryParams));

        $urlPartToSign = $this->config->getBasePath() . '/' . parse_url($UrlToSign, PHP_URL_HOST) . parse_url($UrlToSign, PHP_URL_PATH) . '?' . $urlQuery;

        return $urlPartToSign;
    }

    /**
     * Gets a request token from server
     */
    private function _requestToken()
    {
        $requestUrl = $this->config->getAuthUrl();

        $response = $this->client->request('POST', $requestUrl, [
            'form_params' => [
                'grant_type' => 'client_credentials',
                'client_id' => $this->config->getClientId(),
                'client_secret' => $this->config->getClientSecret(),
            ]
        ]);
        $result = json_decode($response->getBody()->getContents(), true);
        $this->config->setAccessToken($result['access_token']);
    }
}
{{/operations}}
{{>requestModel}}
