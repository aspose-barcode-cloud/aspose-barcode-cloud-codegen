package {{packageName}}

{{#operations}}
import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
{{#imports}}	"{{import}}"
{{/imports}}
)

// Linger please
var (
	_ context.Context
)

//{{classname}}Service - {{description}}
type {{classname}}Service service
{{#operation}}

{{#hasOptionalParams}}
//{{{classname}}}{{{nickname}}}Opts - Optional Parameters for {{{classname}}}{{{nickname}}}
type {{{classname}}}{{{nickname}}}Opts struct { {{#allParams}}{{^required}}
{{#isPrimitiveType}}	{{vendorExtensions.x-exportParamName}} optional.{{vendorExtensions.x-optionalDataType}}{{/isPrimitiveType}}{{^isPrimitiveType}}	{{vendorExtensions.x-exportParamName}} optional.Interface{{/isPrimitiveType}}{{/required}}{{/allParams}}
}
{{/hasOptionalParams}}

/*
 * {{{nickname}}} - {{#summary}} {{.}}{{/summary}}{{#notes}}
 * {{notes}}{{/notes}}
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
{{#allParams}}{{#required}} * @param {{paramName}}{{#description}} {{.}}{{/description}}
{{/required}}{{/allParams}}{{#hasOptionalParams}} * @param optional nil or *{{{classname}}}{{{nickname}}}Opts - Optional Parameters:
{{#allParams}}{{^required}}     * @param "{{vendorExtensions.x-exportParamName}}" ({{#isPrimitiveType}}optional.{{vendorExtensions.x-optionalDataType}}{{/isPrimitiveType}}{{^isPrimitiveType}}optional.Interface of {{dataType}}{{/isPrimitiveType}}) - {{#description}} {{.}}{{/description}}
{{/required}}{{/allParams}}{{/hasOptionalParams}}
{{#returnType}} * @return {{#isResponseFile}}[]byte{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{/isResponseFile}}{{/returnType}}
*/
func (a *{{{classname}}}Service) {{{nickname}}}(ctx context.Context{{#hasParams}}, {{/hasParams}}{{#allParams}}{{#required}}{{paramName}} {{{dataType}}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}optionals *{{{classname}}}{{{nickname}}}Opts{{/hasOptionalParams}}) ({{#isResponseFile}}[]byte, {{/isResponseFile}}{{^isResponseFile}}{{#returnType}}{{{returnType}}}, {{/returnType}}{{/isResponseFile}}*http.Response, error) {
	var (
		httpMethod = strings.ToUpper("{{httpMethod}}")
		postBody   interface{}
		fileName   string
		fileBytes  []byte
		{{#returnType}}returnValue {{#isResponseFile}}[]byte{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{/isResponseFile}}{{/returnType}}
	)

	// create path and map variables
	requestPath := a.client.cfg.BasePath + "{{{path}}}"{{#pathParams}}
	requestPath = strings.Replace(requestPath, "{"+"{{baseName}}"+"}", fmt.Sprintf("%v", {{paramName}}), -1){{/pathParams}}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := url.Values{}
	{{#allParams}}
	{{#required}}
	{{#minItems}}
	if len({{paramName}}) < {{minItems}} {
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{paramName}}) > {{maxItems}} {
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if strlen({{paramName}}) < {{minLength}} {
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if strlen({{paramName}}) > {{maxLength}} {
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt < {{minimum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{#isString}}
	{{paramName}}Txt, err := atoi({{paramName}})
	if {{paramName}}Txt > {{maximum}} {
	{{/isString}}
	{{^isString}}
	if {{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

	{{#hasQueryParams}}
	{{#queryParams}}
	{{#required}}
	queryParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	{{/required}}
	{{^required}}
	if optionals != nil && optionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		{{#isCollectionFormatMulti}}
		values := reflect.ValueOf(optionals.{{vendorExtensions.x-exportParamName}}.Value());
		for i := 0; i < values.Len(); i++ {
			item := values.Index(i)
			queryParams.Add("{{baseName}}", parameterToString(item, ""))
		}
		{{/isCollectionFormatMulti}}
		{{^isCollectionFormatMulti}}
		queryParams.Add("{{baseName}}", parameterToString(optionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
		{{/isCollectionFormatMulti}}
	}
	{{/required}}
	{{/queryParams}}
	{{/hasQueryParams}}
	// to determine the Content-Type header
{{=<% %>=}}
	contentTypeChoices := []string{<%#consumes%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/consumes%>}
<%={{ }}=%>

	// set Content-Type header
	httpContentType := selectHeaderContentType(contentTypeChoices)
	if httpContentType != "" {
		headerParams["Content-Type"] = httpContentType
	}

	// to determine Accept header
{{=<% %>=}}
	acceptChoices := []string{<%#produces%>"<%&mediaType%>"<%^-last%>, <%/-last%><%/produces%>}
<%={{ }}=%>

	// set Accept header
	httpHeaderAccept := selectHeaderAccept(acceptChoices)
	if httpHeaderAccept != "" {
		headerParams["Accept"] = httpHeaderAccept
	}
{{#hasHeaderParams}}
{{#headerParams}}
	{{#required}}
	headerParams["{{baseName}}"] = parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	{{/required}}
	{{^required}}
	if optionals != nil && optionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		headerParams["{{baseName}}"] = parameterToString(optionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}")
	}
	{{/required}}
{{/headerParams}}
{{/hasHeaderParams}}
{{#hasFormParams}}
{{#formParams}}
{{#isFile}}
{{#required}}
    requestFile := {{paramName}}
    if requestFile != nil {
		fileName = requestFile.Name()
		var err error
		fileBytes, err = ioutil.ReadAll(requestFile)
		if err != nil {
			return returnValue, nil, err
		}
	}
{{/required}}
{{^required}}

	if optionals != nil && optionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		if requestFile, fileOk := optionals.{{vendorExtensions.x-exportParamName}}.Value().({{dataType}}); fileOk {
			fileName = requestFile.Name()
			var err error
			fileBytes, err = ioutil.ReadAll(requestFile)
			if err != nil {
				return returnValue, nil, err
			}
		} else if requestBytes, bytesOK := optionals.{{vendorExtensions.x-exportParamName}}.Value().([]byte); bytesOK {
			fileName = "{{vendorExtensions.x-exportParamName}}"
			fileBytes = requestBytes
		} else {
			return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} should be {{dataType}} or []byte")
		}
	}
{{/required}}
{{/isFile}}
{{^isFile}}
{{#required}}
	formParams.Add("{{baseName}}", parameterToString({{paramName}}, "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
{{/required}}
{{^required}}
	if optionals != nil && optionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		formParams.Add("{{baseName}}", parameterToString(optionals.{{vendorExtensions.x-exportParamName}}.Value(), "{{#collectionFormat}}{{collectionFormat}}{{/collectionFormat}}"))
	}
{{/required}}
{{/isFile}}
{{/formParams}}
{{/hasFormParams}}
{{#hasBodyParam}}
{{#bodyParams}}	// body params
{{#required}}
	postBody = &{{paramName}}
{{/required}}
{{^required}}
	if optionals != nil && optionals.{{vendorExtensions.x-exportParamName}}.IsSet() {
		{{#isPrimitiveType}}postBody = &optionals.{{vendorExtensions.x-exportParamName}}.Value(){{/isPrimitiveType}}
		{{^isPrimitiveType}}localVarOptional{{vendorExtensions.x-exportParamName}}, localVarOptional{{vendorExtensions.x-exportParamName}}ok := optionals.{{vendorExtensions.x-exportParamName}}.Value().({{{dataType}}})
		if !localVarOptional{{vendorExtensions.x-exportParamName}}ok {
				return {{#returnType}}returnValue, {{/returnType}}nil, reportError("{{paramName}} should be {{dataType}}")
		}
		postBody = &localVarOptional{{vendorExtensions.x-exportParamName}}{{/isPrimitiveType}}
	}
{{/required}}
{{/bodyParams}}
{{/hasBodyParam}}
{{#authMethods}}
{{#isApiKey}}
	if ctx != nil {
		// API Key Authentication
		if auth, ok := ctx.Value(ContextAPIKey).(APIKey); ok {
			var key string
			if auth.Prefix != "" {
				key = auth.Prefix + " " + auth.Key
			} else {
				key = auth.Key
			}
			{{#isKeyInHeader}}headerParams["{{keyParamName}}"] = key{{/isKeyInHeader}}
			{{#isKeyInQuery}}queryParams.Add("{{keyParamName}}", key){{/isKeyInQuery}}
		}
	}
{{/isApiKey}}
{{/authMethods}}
	r, err := a.client.prepareRequest(ctx, requestPath, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}nil, err
	}

	httpResponse, err := a.client.callAPI(r)
	if err != nil || httpResponse == nil {
		return {{#returnType}}returnValue, {{/returnType}}httpResponse, err
	}

	responseBody, err := ioutil.ReadAll(httpResponse.Body)
	httpResponse.Body.Close()
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}httpResponse, err
	}

	{{#returnType}}
	if httpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&returnValue, responseBody, httpResponse.Header.Get("Content-Type"))
		if err == nil {
			return {{#returnType}}{{#isResponseFile}}responseBody, {{/isResponseFile}}{{^isResponseFile}}returnValue, {{/isResponseFile}}{{/returnType}}httpResponse, err
		}
	}
	{{/returnType}}

	if httpResponse.StatusCode >= 300 {
		newErr := GenericAPIError{
			error: httpResponse.Status,
			text:  string(responseBody),
			StatusCode: httpResponse.StatusCode,
		}
		{{#responses}}{{#dataType}}
		if httpResponse.StatusCode == {{{code}}} {
			var v {{{dataType}}}
			err = a.client.decode(&v, responseBody, httpResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return {{#returnType}}returnValue, {{/returnType}}httpResponse, newErr
			}
			newErr.model = v
			return {{#returnType}}returnValue, {{/returnType}}httpResponse, newErr
		}
		{{/dataType}}{{/responses}}
		return {{#returnType}}returnValue, {{/returnType}}httpResponse, newErr
	}

	return {{#returnType}}returnValue, {{/returnType}}httpResponse, err
}
{{/operation}}{{/operations}}
