{{! MainActivity.kt }}
{{>licenseInfo}}
package {{invokerPackage}}

import android.Manifest
import android.app.Activity
import android.content.Intent
import android.content.pm.PackageManager
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.net.Uri
import android.os.Bundle
import android.util.Size
import android.view.View
import android.view.animation.AnimationUtils
import android.widget.*
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.ContextCompat
import com.aspose.barcode.cloud.ApiClient
import com.aspose.barcode.cloud.ApiException
import com.aspose.barcode.cloud.api.BarcodeApi
import com.aspose.barcode.cloud.model.EncodeBarcodeType
import com.aspose.barcode.cloud.model.PresetType
import com.google.android.material.snackbar.Snackbar
import java.io.File
import java.io.FileOutputStream
import kotlin.math.floor

class MainActivity : AppCompatActivity() {
    companion object {
        const val PERMISSION_REQUEST_CALLBACK_CODE = 1
        const val ACTION_GET_CONTENT_CALLBACK_CODE = 2
        private fun imageSize(width: Int, height: Int, maxSize: Int = 256): Size {
            val ratio = width.toFloat() / height
            if (ratio > 1) {
                // width > height
                // use width
                if (width < maxSize) {
                    // do not resize
                    return Size(width, height)
                }

                val newHeight = floor(maxSize / ratio).toInt()
                return Size(maxSize, newHeight)
            }
            // width <= height
            // use height
            if (height < maxSize) {
                // do not resize
                return Size(width, height)
            }
            val newWidth = floor(maxSize * ratio).toInt()
            return Size(newWidth, maxSize)
        }
    }

    private lateinit var barcodeTypeSpinner: Spinner
    private lateinit var barcodeTextEdit: EditText
    private lateinit var barcodeImgView: ImageView

    private lateinit var api: BarcodeApi
    private val encodeTypes = EncodeBarcodeType.values().map { it.toString() }.sorted()

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        barcodeTypeSpinner = findViewById(R.id.typeSpinner)
        populateBarcodeTypesSpinner()

        barcodeTextEdit = findViewById(R.id.editText)
        barcodeImgView = findViewById(R.id.imageView)

        val client = ApiClient(
            "App SID from https://dashboard.aspose.cloud/#/apps",
            "App Key from https://dashboard.aspose.cloud/#/apps"
        )
        client.connectTimeout = 100000
        client.writeTimeout = 100000
        client.readTimeout = 100000

        api = BarcodeApi(client)
    }

    private fun showErrorMessage(error: String, duration: Int = Snackbar.LENGTH_INDEFINITE) {
        Snackbar.make(findViewById(android.R.id.content), error, duration).show()
    }

    private fun populateBarcodeTypesSpinner() {
        val adapter = ArrayAdapter(this, android.R.layout.simple_spinner_item, encodeTypes)
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item)
        barcodeTypeSpinner.adapter = adapter
        barcodeTypeSpinner.setSelection(encodeTypes.indexOf("QR"))
    }

    private fun requestPermissionAndPickFile(context: Activity) {
        if (ContextCompat.checkSelfPermission(
                context,
                Manifest.permission.READ_EXTERNAL_STORAGE
            ) == PackageManager.PERMISSION_GRANTED
        ) {
            pickFile()
        } else {
            requestPermissions(
                arrayOf(Manifest.permission.READ_EXTERNAL_STORAGE),
                PERMISSION_REQUEST_CALLBACK_CODE
            )
        }
    }


    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<String>, grantResults: IntArray
    ) {
        when (requestCode) {
            PERMISSION_REQUEST_CALLBACK_CODE -> {
                // If request is cancelled, the result arrays are empty.
                if ((grantResults.isNotEmpty() &&
                            grantResults[0] == PackageManager.PERMISSION_GRANTED)
                ) {
                    // Permission is granted. Continue the action or workflow
                    // in your app.
                    pickFile()
                } else {
                    // Explain to the user that the feature is unavailable because
                    // the features requires a permission that the user has denied.
                    // At the same time, respect the user's decision. Don't link to
                    // system settings in an effort to convince the user to change
                    // their decision.
                    showErrorMessage("Permission to read image denied")
                }
                return
            }

            // Add other 'when' lines to check for other
            // permissions this app might request.
            else -> {
                // Ignore all other requests.
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        when (requestCode) {
            ACTION_GET_CONTENT_CALLBACK_CODE -> {
                if (resultCode == Activity.RESULT_OK) {
                    recognizeBarcode(data?.data!!)
                }
            }
            else -> {
                showErrorMessage("No file selected")
            }
        }
    }

    private fun recognizeBarcode(imageData: Uri) {
        try {
            val bytes = contentResolver.openInputStream(imageData)!!.readBytes()
            val bmp = BitmapFactory.decodeByteArray(bytes, 0, bytes.size)
            val newSize = imageSize(bmp.width, bmp.height)
            val smallerBmp = Bitmap.createScaledBitmap(bmp, newSize.width, newSize.height, true)
            setBarcodeBitmapAndStartAnimation(smallerBmp)

            val tmpFile = File.createTempFile("barcode", null)

            FileOutputStream(tmpFile).use { output ->
                smallerBmp.compress(Bitmap.CompressFormat.PNG, 100, output)
            }

            Thread {
                try {
                    val recognized = api.postBarcodeRecognizeFromUrlOrContent(
                        null,
                        null,
                        null,
                        PresetType.HIGHPERFORMANCE.value,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        tmpFile
                    )

                    runOnUiThread {
                        barcodeImgView.clearAnimation()
                        if (recognized.barcodes.isEmpty()) {
                            barcodeTextEdit.setText("")
                            showErrorMessage("No barcode detected")
                            return@runOnUiThread
                        }
                        val firstBarcode = recognized.barcodes.first()
                        barcodeTextEdit.setText(firstBarcode.barcodeValue)
                        val index = encodeTypes.indexOf(firstBarcode.type)
                        barcodeTypeSpinner.setSelection(index, true)
                    }
                } catch (e: ApiException) {
                    runOnUiThread {
                        barcodeImgView.clearAnimation()
                        showErrorMessage(e.message + ": " + e.details)
                    }
                } catch (e: Exception) {
                    barcodeImgView.clearAnimation()
                    runOnUiThread {
                        showErrorMessage("Exception: " + e.message)
                    }
                }
            }.start()

        } catch (e: java.lang.Exception) {
            showErrorMessage(e.message!!)
        }
    }

    private fun setBarcodeBitmapAndStartAnimation(image: Bitmap) {
        barcodeImgView.setImageBitmap(image)
        val rotation = AnimationUtils.loadAnimation(this, R.anim.rotate)
        rotation.fillAfter = true
        barcodeImgView.startAnimation(rotation)
    }

    fun onBtnGenerateClick(@Suppress("UNUSED_PARAMETER") view: View) {
        val type: String = barcodeTypeSpinner.selectedItem.toString()
        Thread {
            try {
                val generated: File? = api.getBarcodeGenerate(
                    type,
                    barcodeTextEdit.text.toString(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    barcodeImgView.measuredHeight.toDouble(),
                    barcodeImgView.measuredWidth.toDouble(),
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    null,
                    "png"
                )
                runOnUiThread {
                    val bitmap = BitmapFactory.decodeFile(generated!!.absolutePath)
                    barcodeImgView.setImageBitmap(bitmap)
                }

            } catch (e: ApiException) {
                runOnUiThread {
                    showErrorMessage(
                        e.details
                    )
                }
            } catch (e: Exception) {
                runOnUiThread {
                    showErrorMessage("Exception: " + e.message)
                }
            }
        }.start()
    }

    fun onBtnRecognizeClick(@Suppress("UNUSED_PARAMETER") view: View) {
        requestPermissionAndPickFile(this)
    }

    private fun pickFile() {
        val intent = Intent(Intent.ACTION_GET_CONTENT)
        intent.type = "image/*"
        startActivityForResult(intent, ACTION_GET_CONTENT_CALLBACK_CODE)
    }
}
