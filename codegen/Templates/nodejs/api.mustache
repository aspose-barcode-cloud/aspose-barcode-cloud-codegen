{{>licenseInfo}}
import http from 'http';
import Request from 'request';

import { Configuration } from './Configuration';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

/* tslint:disable:no-unused-variable */
let primitives = ['string', 'boolean', 'double', 'integer', 'long', 'float', 'number', 'any'];

class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == null) {
            return expectedType;
        }

        if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }

        if (expectedType === 'Date') {
            return expectedType;
        }

        if (enumsMap[expectedType]) {
            return expectedType;
        }

        if (!typeMap[expectedType]) {
            return expectedType; // w/e we don't know the type
        }

        // Check the discriminator
        let discriminatorProperty = typeMap[expectedType].discriminator;
        if (discriminatorProperty == null) {
            return expectedType; // the type does not have a discriminator. use it.
        }

        if (data[discriminatorProperty]) {
            return data[discriminatorProperty]; // use the type given in the discriminator
        }

        return expectedType; // discriminator was not present (or an empty string)
    }

    public static serialize(data: any, type: string) {
        if (data == null) {
            return data;
        }

        if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }

        if (type.lastIndexOf('Array<', 0) === 0) {
            // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }

            return transformedData;
        }

        if (type === 'Date') {
            return data.toString();
        }

        if (enumsMap[type]) {
            return enumsMap[type][data];
        }

        if (!typeMap[type]) {
            // in case we dont know the type
            return data;
        }

        // get the map for the correct type.
        let attributeTypes = typeMap[type].getAttributeTypeMap();
        let instance: { [index: string]: any } = {};
        for (let index in attributeTypes) {
            let attributeType = attributeTypes[index];
            instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
        }

        return instance;
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);

        if (data == null) {
            return data;
        }

        if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }

        if (type.lastIndexOf('Array<', 0) === 0) {
            // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }

        if (type === 'Date') {
            return new Date(data);
        }

        if (enumsMap[type]) {
            // is Enum
            return data;
        }

        if (!typeMap[type]) {
            // dont know the type
            return data;
        }

        if (typeof data === 'string') {
            // data should be deserialized before usage
            data = JSON.parse(data);
        }

        let instance = new typeMap[type]();
        let attributeTypes = typeMap[type].getAttributeTypeMap();
        for (const attributeType of attributeTypes) {
            const key = attributeType.baseName.replace(/^(.)/, $1 => {
                return $1.toLowerCase();
            });
            const value = ObjectSerializer.deserialize(data[key], attributeType.type);
            instance[attributeType.name] = value;
        }

        return instance;
    }
}

{{#models}}
{{#model}}
{{#description}}

/**
 * {{{description}}}
 */
{{/description}}
{{#isEnum}}
export enum {{classname}} {
    {{#allowableValues}}{{#enumVars}}{{{name}}} = {{{value}}},
    {{/enumVars}}{{/allowableValues}}
}
{{/isEnum}}
{{^isEnum}}
export class {{classname}} {{#parent}}extends {{{parent}}} {{/parent}}{
{{#vars}}
{{#description}}
    /**
     * {{{description}}}
     */
{{/description}}
    '{{name}}'{{^required}}?{{/required}}: {{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}};
{{/vars}}

    static attributeTypeMap: Array<{ name: string; baseName: string; type: string }> = [
        {{#vars}}
        {
            name: '{{name}}',
            baseName: '{{baseName}}',
            type: '{{#isEnum}}{{{datatypeWithEnum}}}{{/isEnum}}{{^isEnum}}{{{datatype}}}{{/isEnum}}',
        },
        {{/vars}}
    ];

    static getAttributeTypeMap() {
        {{#parent}}
        return super.getAttributeTypeMap().concat({{classname}}.attributeTypeMap);
        {{/parent}}
        {{^parent}}
        return {{classname}}.attributeTypeMap;
        {{/parent}}
    }
}
{{/isEnum}}
{{/model}}

{{/models}}

let enumsMap: { [index: string]: any } = {
    {{#models}}
    {{#model}}
    {{#isEnum}}
    {{classname}}: {{classname}},
    {{/isEnum}}
    {{/model}}
    {{/models}}
};

let typeMap: { [index: string]: any } = {
    {{#models}}
    {{#model}}
    {{^isEnum}}
    {{classname}}: {{classname}},
    {{/isEnum}}
    {{/model}}
    {{/models}}
};

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export class {{classname}} {
    protected defaultHeaders: any = {};
    protected _configuration: Configuration;

    constructor(configuration: Configuration) {
        this._configuration = configuration;
    }

{{#operation}}

    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{nickname}}({{#allParams}}
        {{paramName}}{{^required}}?{{/required}}: {{{dataType}}}{{#hasMore}},{{/hasMore}}{{/allParams}}
    ): Promise<{ response: http.{{#supportsES6}}IncomingMessage{{/supportsES6}}{{^supportsES6}}ClientResponse{{/supportsES6}}; {{#returnType}}body: {{{returnType}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
        const requestPath =
            this._configuration.getApiBaseUrl() +
            '{{{path}}}'{{#pathParams}}.replace(
                '{' + '{{baseName}}' + '}',
                encodeURIComponent(String({{paramName}}))
            ){{/pathParams}};
        let requestQueryParameters: any = {};
        let requestHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
        let requestFormParams: any = {};

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            requestQueryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }

{{/queryParams}}
{{#headerParams}}
        requestHeaderParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, '{{{dataType}}}');
{{/headerParams}}
        let requestUseFormData = false;

{{#formParams}}
        if ({{paramName}} !== undefined) {
            {{#isFile}}
            requestFormParams['{{baseName}}'] = {{paramName}};
            {{/isFile}}
            {{^isFile}}
            requestFormParams['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, '{{{dataType}}}');
            {{/isFile}}
        }
{{#isFile}}

        requestUseFormData = true;
{{/isFile}}

{{/formParams}}
        let requestOptions: Request.Options = {
            method: '{{httpMethod}}',
            qs: requestQueryParameters,
            headers: requestHeaderParams,
            uri: requestPath,
{{#formParams}}
{{#isFile}}
      body: {{paramName}},
{{/isFile}}
{{/formParams}}
{{#bodyParam}}
            body: ObjectSerializer.serialize({{paramName}}, '{{{dataType}}}'),
            json: true,
{{/bodyParam}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
        };

        await this._configuration.authentication.applyToRequest(requestOptions);
        {{#formParams}}{{^isFile}}
        if (Object.keys(requestFormParams).length) {
            if (requestUseFormData) {
                (requestOptions as any).formData = requestFormParams;
            } else {
                requestOptions.form = requestFormParams;
            }
        }{{/isFile}}{{/formParams}}
        return await new Promise<{ response: http.{{#supportsES6}}IncomingMessage{{/supportsES6}}{{^supportsES6}}ClientResponse{{/supportsES6}}; {{#returnType}}body: {{{returnType}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}}}>((resolve, reject) => {
            const handler = async (error, response, body, allowRepeat) => {
                if (error) {
                    reject(error);
                } else {
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({
                            response: response,
                            {{#returnType}}
                            body: ObjectSerializer.deserialize(body, '{{{returnType}}}'),
                            {{/returnType}}
                        });
                    } else if (allowRepeat && response.statusCode && response.statusCode === 401) {
                        await this._configuration.authentication.applyUnauthorized();
                        await handler(error, response, body, false);
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            };
            Request(requestOptions, (error, response, body) => handler(error, response, body, true));
        });
    }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
