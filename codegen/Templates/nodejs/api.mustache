{{>licenseInfo}}


// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================


import { Configuration } from './Configuration';
import { HttpClient, HttpOptions, HttpResponse, HttpResult } from './httpClient';

export * from './models';

import { {{#models}} {{#model}}{{classname}},{{/model}} {{/models}} } from './models';

import { {{#apiInfo}}{{#apis}}{{#operations}}{{#operation}} {{operationIdCamelCase}}Request, {{/operation}}{{/operations}}{{/apis}}{{/apiInfo}} } from './models';


let primitives = ['string', 'boolean', 'double', 'integer', 'long', 'float', 'number', 'any'];

class ObjectSerializer {
    public static findCorrectType(data: any, expectedType: string) {
        if (data == null) {
            return expectedType;
        }

        if (primitives.indexOf(expectedType.toLowerCase()) !== -1) {
            return expectedType;
        }

        if (expectedType === 'Date') {
            return expectedType;
        }

        if (enumsMap[expectedType]) {
            return expectedType;
        }

        if (!typeMap[expectedType]) {
            return expectedType; // w/e we don't know the type
        }

        // Check the discriminator
        let discriminatorProperty = typeMap[expectedType].discriminator;
        if (discriminatorProperty == null) {
            return expectedType; // the type does not have a discriminator. use it.
        }

        if (data[discriminatorProperty]) {
            return data[discriminatorProperty]; // use the type given in the discriminator
        }

        return expectedType; // discriminator was not present (or an empty string)
    }

    public static serialize(data: any, type: string) {
        if (data == null) {
            return data;
        }

        if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }

        if (type.lastIndexOf('Array<', 0) === 0) {
            // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.serialize(date, subType));
            }

            return transformedData;
        }

        if (type === 'Date') {
            return data.toString();
        }

        if (enumsMap[type]) {
            return enumsMap[type][data];
        }

        if (!typeMap[type]) {
            // in case we don't know the type
            return data;
        }

        // get the map for the correct type.
        let attributeTypes = typeMap[type].getAttributeTypeMap();
        let instance: { [index: string]: any } = {};
        for (let index in attributeTypes) {
            let attributeType = attributeTypes[index];
            instance[attributeType.baseName] = ObjectSerializer.serialize(data[attributeType.name], attributeType.type);
        }

        return instance;
    }

    public static deserialize(data: any, type: string) {
        // polymorphism may change the actual type.
        type = ObjectSerializer.findCorrectType(data, type);

        if (data == null) {
            return data;
        }

        if (primitives.indexOf(type.toLowerCase()) !== -1) {
            return data;
        }

        if (type.lastIndexOf('Array<', 0) === 0) {
            // string.startsWith pre es6
            let subType: string = type.replace('Array<', ''); // Array<Type> => Type>
            subType = subType.substring(0, subType.length - 1); // Type> => Type
            let transformedData: any[] = [];
            for (let index in data) {
                let date = data[index];
                transformedData.push(ObjectSerializer.deserialize(date, subType));
            }
            return transformedData;
        }

        if (type === 'Date') {
            return new Date(data);
        }

        if (enumsMap[type]) {
            // is Enum
            return data;
        }

        if (!typeMap[type]) {
            // don't know the type
            return data;
        }

        if (typeof data === 'string') {
            // data should be deserialized before usage
            data = JSON.parse(data);
        }

        let instance = new typeMap[type]();
        let attributeTypes = typeMap[type].getAttributeTypeMap();
        for (const attributeType of attributeTypes) {
            const key = attributeType.baseName.replace(/^(.)/, ($1: string) => {
                return $1.toLowerCase();
            });
            instance[attributeType.name] = ObjectSerializer.deserialize(data[key], attributeType.type);
        }

        return instance;
    }
}


let enumsMap: { [index: string]: any } = {
    {{#models}}
    {{#model}}
    {{#isEnum}}
    {{classname}}: {{classname}},
    {{/isEnum}}
    {{/model}}
    {{/models}}
};

let typeMap: { [index: string]: any } = {
    {{#models}}
    {{#model}}
    {{^isEnum}}
    {{classname}}: {{classname}},
    {{/isEnum}}
    {{/model}}
    {{/models}}
};

{{#apiInfo}}
{{#apis}}
{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}

export class {{classname}} {
    protected defaultHeaders: any = {};
    protected _configuration: Configuration;
    private _client: HttpClient;

    constructor(configuration: Configuration) {
        this._configuration = configuration;
        this._client = new HttpClient();
    }

{{#operation}}

    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     * @param request {{operationIdCamelCase}}Request
     */
    public async {{nickname}}(request: {{operationIdCamelCase}}Request): Promise<{ response: HttpResponse; {{#returnType}}body: {{{returnType}}}; {{/returnType}}{{^returnType}}body?: any; {{/returnType}} }> {
        const requestPath =
            this._configuration.getApiBaseUrl() +
            '{{{path}}}'{{#pathParams}}.replace(
                '{' + '{{baseName}}' + '}',
                String(request.{{paramName}})
            ){{/pathParams}};
        let requestQueryParameters: any = {};
        let requestHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
{{#formParams}}
        let requestFormParams: any = {};
{{/formParams}}

{{#allParams}}
{{#required}}
        // verify required parameter 'request.{{paramName}}' is not null or undefined
        if (request.{{paramName}} == null) {
            throw new Error('Required parameter request.{{paramName}} was null or undefined when calling {{nickname}}.');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if (request.{{paramName}} != null) {
            requestQueryParameters['{{baseName}}'] = ObjectSerializer.serialize(request.{{paramName}}, "{{{dataType}}}");
        }

{{/queryParams}}
{{#headerParams}}
        requestHeaderParams['{{baseName}}'] = ObjectSerializer.serialize(request.{{paramName}}, '{{{dataType}}}');
{{/headerParams}}

{{#formParams}}
        if (request.{{paramName}} != null) {
            {{#isFile}}
            requestFormParams['{{baseName}}'] = request.{{paramName}};
            {{/isFile}}
            {{^isFile}}
            requestFormParams['{{baseName}}'] = ObjectSerializer.serialize(request.{{paramName}}, '{{{dataType}}}');
            {{/isFile}}
        }

{{/formParams}}
        let requestOptions: HttpOptions = {
            method: '{{httpMethod}}',
            qs: requestQueryParameters,
            headers: requestHeaderParams,
            uri: requestPath,
{{#formParams}}
{{#isFile}}
      body: request.{{paramName}},
{{/isFile}}
{{/formParams}}
{{#bodyParam}}
            body: ObjectSerializer.serialize(request.{{paramName}}, '{{{dataType}}}'),
            json: true,
{{/bodyParam}}
{{#isResponseFile}}
            encoding: null,
{{/isResponseFile}}
        };

        await this._configuration.authentication.applyToRequest(requestOptions);
        {{#formParams}}{{^isFile}}
        if (Object.keys(requestFormParams).length) {
            if (requestUseFormData) {
                (requestOptions as any).formData = requestFormParams;
            } else {
                requestOptions.form = requestFormParams;
            }
        }{{/isFile}}{{/formParams}}

        const result: HttpResult = await this._client.requestAsync(requestOptions);

        {{#returnType}}
        return {
            response: result.response,
            body: ObjectSerializer.deserialize(result.body, '{{{returnType}}}')
        };
        {{/returnType}}
        {{^returnType}}
        return result;
        {{/returnType}}
    }
{{/operation}}
}
{{/operations}}
{{/apis}}
{{/apiInfo}}
