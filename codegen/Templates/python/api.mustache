# coding: utf-8

import re  # noqa: F401
import warnings  # noqa: F401

from {{packageName}}.api_client import ApiClient


{{#operations}}
class {{classname}}(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
{{#operation}}

    def {{operationId}}(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{paramName}}{{^required}}={{#defaultValue}}{{#isBoolean}}None{{/isBoolean}}{{^isBoolean}}{{{example}}}{{/isBoolean}}{{/defaultValue}}{{^defaultValue}}None{{/defaultValue}}{{/required}}, {{/allParams}}{{/sortParamsByRequiredFlag}}async_req=False, **kwargs):
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

{{#notes}}
        {{{notes}}}
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
{{#sortParamsByRequiredFlag}}
        >>> thread = {{classname}}().{{operationId}}({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}async_req=True)
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = {{classname}}().{{operationId}}({{#allParams}}{{#required}}{{paramName}}={{paramName}}_value, {{/required}}{{/allParams}}async_req=True)
{{/sortParamsByRequiredFlag}}
        >>> result = thread.get()

{{#allParams}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}} # noqa: E501
{{/allParams}}
        :param async_req bool
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if async_req:
            return self.{{operationId}}_with_http_info({{#sortParamsByRequiredFlag}}{{#allParams}}{{paramName}}{{^required}}={{paramName}}{{/required}}, {{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs)
        else:
            (data) = self.{{operationId}}_with_http_info({{#sortParamsByRequiredFlag}}{{#allParams}}{{paramName}}{{^required}}={{paramName}}{{/required}}, {{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs)
            return data

    def {{operationId}}_with_http_info(self, {{#sortParamsByRequiredFlag}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/sortParamsByRequiredFlag}}**kwargs):
        """{{#summary}}{{{.}}}{{/summary}}{{^summary}}{{operationId}}{{/summary}}

{{#notes}}
        {{{notes}}}
{{/notes}}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
{{#sortParamsByRequiredFlag}}
        >>> thread = {{classname}}().{{operationId}}_with_http_info({{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}async_req=True)
{{/sortParamsByRequiredFlag}}
{{^sortParamsByRequiredFlag}}
        >>> thread = {{classname}}().{{operationId}}_with_http_info({{#allParams}}{{#required}}{{paramName}}={{paramName}}_value, {{/required}}{{/allParams}}async_req=True)
{{/sortParamsByRequiredFlag}}
        >>> result = thread.get()

{{#allParams}}
{{#required}}
        :param {{dataType}} {{paramName}}:{{#description}} {{{description}}}{{/description}} # noqa: E501
{{/required}}
{{/allParams}}
        :return: {{#returnType}}{{returnType}}{{/returnType}}{{^returnType}}None{{/returnType}}
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = { {{#allParams}}"{{paramName}}"{{#hasMore}}, {{/hasMore}}{{/allParams}} }
        all_params.add("async_req")
        all_params.add("_return_http_data_only")
        all_params.add("_preload_content")
        all_params.add("_request_timeout")

        params = locals()
        for key, val in params["kwargs"].items():
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method {{operationId}}" % key
                )
            if val is None:
                continue

            params[key] = val
        del params["kwargs"]
{{#allParams}}
{{#required}}
        # verify the required parameter "{{paramName}}" is set
        if ("{{paramName}}" not in params or
                params["{{paramName}}"] is None):
            raise ValueError("Missing the required parameter '{{paramName}}' when calling '{{operationId}}'")
{{/required}}
{{/allParams}}

{{#allParams}}
{{#hasValidation}}
    {{#maxLength}}
        if ("{{paramName}}" in params and
                len(params["{{paramName}}"]) > {{maxLength}}):
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', length must be less than or equal to "{{maxLength}}"")
    {{/maxLength}}
    {{#minLength}}
        if ("{{paramName}}" in params and
                len(params["{{paramName}}"]) < {{minLength}}):
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', length must be greater than or equal to "{{minLength}}"")
    {{/minLength}}
    {{#maximum}}
        if "{{paramName}}" in params and params["{{paramName}}"] >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}:
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', must be a value less than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}"{{maximum}}"")
    {{/maximum}}
    {{#minimum}}
        if "{{paramName}}" in params and params["{{paramName}}"] <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}:
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', must be a value greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}"{{minimum}}"")
    {{/minimum}}
    {{#pattern}}
        if "{{paramName}}" in params and not re.search(r"{{{vendorExtensions.x-regex}}}", params["{{paramName}}"]{{#vendorExtensions.x-modifiers}}{{#-first}}, flags={{/-first}}re.{{.}}{{^-last}} | {{/-last}}{{/vendorExtensions.x-modifiers}}):
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', must conform to the pattern "{{{pattern}}}"")
    {{/pattern}}
    {{#maxItems}}
        if ("{{paramName}}" in params and
                len(params["{{paramName}}"]) > {{maxItems}}):
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', number of items must be less than or equal to "{{maxItems}}"")
    {{/maxItems}}
    {{#minItems}}
        if ("{{paramName}}" in params and
                len(params["{{paramName}}"]) < {{minItems}}):
            raise ValueError("Invalid value for parameter '{{paramName}}' when calling '{{operationId}}', number of items must be greater than or equal to "{{minItems}}"")
    {{/minItems}}
{{/hasValidation}}
{{#-last}}
{{/-last}}
{{/allParams}}
        collection_formats = {}

        path_params = {}
{{#pathParams}}
        if "{{paramName}}" in params:
            path_params["{{baseName}}"] = params["{{paramName}}"]{{#isListContainer}}
            collection_formats["{{baseName}}"] = "{{collectionFormat}}"{{/isListContainer}}
{{/pathParams}}

        query_params = []
{{#queryParams}}
        if "{{paramName}}" in params:
            query_params.append(("{{baseName}}", params["{{paramName}}"])){{#isListContainer}}
            collection_formats["{{baseName}}"] = "{{collectionFormat}}"{{/isListContainer}}
{{/queryParams}}

        header_params = {}
{{#headerParams}}
        if "{{paramName}}" in params:
            header_params["{{baseName}}"] = params["{{paramName}}"]{{#isListContainer}}
            collection_formats["{{baseName}}"] = "{{collectionFormat}}"{{/isListContainer}}
{{/headerParams}}

        form_params = []
        local_var_files = {}
{{#formParams}}
        if "{{paramName}}" in params:
            {{#notFile}}form_params.append(("{{baseName}}", params["{{paramName}}"])){{/notFile}}{{#isFile}}local_var_files["{{baseName}}"] = params["{{paramName}}"]{{/isFile}}{{#isListContainer}}
            collection_formats["{{baseName}}"] = "{{collectionFormat}}"{{/isListContainer}}
{{/formParams}}

        body_params = None
{{#bodyParam}}
        if "{{paramName}}" in params:
            body_params = params["{{paramName}}"]
{{/bodyParam}}
        {{#hasProduces}}
        # HTTP header "Accept"
        header_params["Accept"] = self.api_client.select_header_accept(
            [{{#produces}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/produces}}])

        {{/hasProduces}}
        {{#hasConsumes}}
        # HTTP header "Content-Type"
        header_params["Content-Type"] = self.api_client.select_header_content_type(
            [{{#consumes}}"{{{mediaType}}}"{{#hasMore}}, {{/hasMore}}{{/consumes}}])

        {{/hasConsumes}}
        # Authentication setting
        auth_settings = [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}]

        return self.api_client.call_api(
            "{{{path}}}", "{{httpMethod}}",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type={{#returnType}}"{{returnType}}"{{/returnType}}{{^returnType}}None{{/returnType}},
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", {{#vendorExtensions}}{{#x-binary-result}}False{{/x-binary-result}}{{^x-binary-result}}True{{/x-binary-result}}{{/vendorExtensions}}{{^vendorExtensions}}True{{/vendorExtensions}}),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats)
{{/operation}}
{{/operations}}
