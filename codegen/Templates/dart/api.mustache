part of {{pubName}}.api;

{{#operations}}


class {{classname}} {
  {{classname}}(this.apiClient) {}

  final ApiClient apiClient;

  {{#operation}}
  ///
  /// {{summary}}
  /// {{notes}}
  {{#isDeprecated}}
  @deprecated
  {{/isDeprecated}}
  {{#returnType}}Future<{{#isResponseFile}}Uint8List{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{/isResponseFile}}> {{/returnType}}{{^returnType}}Future {{/returnType}}{{nickname}}({{#allParams}}{{#required}}{{{dataType}}} {{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{{dataType}}}? {{paramName}}{{#hasMore}}, {{/hasMore}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    // ignore: prefer_final_locals
    Object? postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    // create path and map variables
    final String requestPath = "{{{path}}}".replaceAll("{format}","json"){{#pathParams}}.replaceAll("{" + "{{baseName}}" + "}", {{{paramName}}}){{/pathParams}};

    // query params
    final List<QueryParam> queryParams = [];
    final Map<String, String> headerParams = {};
    final Map<String, String> formParams = {};
    {{#queryParams}}
    {{^required}}
    if({{paramName}} != null) {
    {{/required}}
      queryParams.addAll(_convertParametersForCollectionFormat("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
    {{^required}}
    }
    {{/required}}
    {{/queryParams}}
    {{#headerParams}}headerParams["{{baseName}}"] = {{paramName}};
    {{/headerParams}}

    final List<String> contentTypes = [{{#consumes}}"{{{mediaType}}}"{{#hasMore}},{{/hasMore}}{{/consumes}}];

    final String contentType = contentTypes.isNotEmpty ? contentTypes[0] : "application/json";
    final List<String> authNames = [{{#authMethods}}"{{name}}"{{#hasMore}}, {{/hasMore}}{{/authMethods}}];

    {{#hasFormParams}}
    if(contentType.startsWith("multipart/form-data")) {
      bool hasFields = false;
      MultipartRequest? mp;
      {{#formParams}}{{#notFile}}
      if ({{paramName}} != null) {
        hasFields = true;
        mp.fields['{{baseName}}'] = parameterToString({{paramName}});
      }
      {{/notFile}}{{#isFile}}
      mp = new MultipartRequest('{{httpMethod}}', Uri.parse(requestPath));
      // ignore: unnecessary_null_comparison
      if ({{paramName}} != null) {
        hasFields = true;
        mp.fields['{{baseName}}'] = {{paramName}}.field;
        mp.files.add({{paramName}});
      }

      {{/isFile}}{{/formParams}}
      if (hasFields) {
        postBody = mp;
      }
    }
    else {
      {{#formParams}}{{#notFile}}if ({{paramName}} != null)
        formParams['{{baseName}}'] = parameterToString({{paramName}});{{/notFile}}
      {{/formParams}}
    }
    {{/hasFormParams}}

    final response = await apiClient.invokeAPI(requestPath,
                                             '{{httpMethod}}',
                                             queryParams,
                                             postBody,
                                             headerParams,
                                             formParams,
                                             contentType,
                                             authNames);

    if(response.statusCode >= 400) {
      throw new ApiException(response.statusCode, response.body);
    } else {
      return
      {{#isListContainer}}
        {{#returnType}}(apiClient.deserialize(response.body, '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();{{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{#returnType}}new {{{returnType}}}.from(apiClient.deserialize(response.body, '{{{returnType}}}')) {{/returnType}};
        {{/isMapContainer}}
        {{^isMapContainer}}
        {{#isResponseFile}}
        response.bodyBytes;
        {{/isResponseFile}}
        {{^isResponseFile}}
          {{#returnType}}apiClient.deserialize(response.body, '{{{returnType}}}') as {{{returnType}}} {{/returnType}};
        {{/isResponseFile}}
        {{/isMapContainer}}
      {{/isListContainer}}
    }
  }
  {{/operation}}
}
{{/operations}}
