import 'dart:typed_data' show Uint8List;

import 'package:http/http.dart' show MultipartFile;

import '../http/multipart_request_plus.dart';
import '../../aspose_barcode_cloud.dart';
import '../api_helper.dart';

{{#operations}}

/// {{classname}}
class {{classname}} {
  /// Constructor
  {{classname}}(this._apiClient) {}

  final ApiClient _apiClient;

  {{#operation}}
  ///
  /// {{summary}}
  /// {{notes}}
  {{#isDeprecated}}
  @deprecated
  {{/isDeprecated}}
  {{#returnType}}Future<{{#isResponseFile}}Uint8List{{/isResponseFile}}{{^isResponseFile}}{{{returnType}}}{{/isResponseFile}}> {{/returnType}}{{^returnType}}Future {{/returnType}}{{nickname}}({{#allParams}}{{#required}}{{^isFile}}{{{dataType}}} {{paramName}}{{/isFile}}{{#isFile}}Uint8List {{paramName}}Bytes{{/isFile}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}}{{#hasOptionalParams}}{ {{#allParams}}{{^required}}{{^isFile}}{{{dataType}}}? {{paramName}}{{/isFile}}{{#isFile}}Uint8List? {{paramName}}Bytes{{/isFile}}{{^-last}}, {{/-last}}{{/required}}{{/allParams}} }{{/hasOptionalParams}}) async {
    // ignore: prefer_final_locals
    Object? postBody = {{#bodyParam}}{{paramName}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};

    // create path and map variables
    final String requestPath = "{{{path}}}"{{#pathParams}}.replaceAll("{" + "{{baseName}}" + "}", {{{paramName}}}.toString()){{/pathParams}};

    // query params
    final List<QueryParam> queryParams = [];
    final Map<String, String> headerParams = {};
    final Map<String, String> formParams = {};
    {{#queryParams}}
    {{^required}}
    if({{paramName}} != null) {
    {{/required}}
      queryParams.addAll(convertParametersForCollectionFormat("{{collectionFormat}}", "{{baseName}}", {{paramName}}));
    {{^required}}
    }
    {{/required}}
    {{/queryParams}}
    {{#headerParams}}headerParams["{{baseName}}"] = {{paramName}};
    {{/headerParams}}

    final List<String> contentTypes = [{{#consumes}}"{{{mediaType}}}"{{^-last}},{{/-last}}{{/consumes}}];

    final String contentType = contentTypes.isNotEmpty ? contentTypes[0] : "application/json";
    final List<String> authNames = [{{#authMethods}}"{{name}}"{{^-last}}, {{/-last}}{{/authMethods}}];

    {{#hasFormParams}}
      MultipartRequestPlus mp = MultipartRequestPlus('{{httpMethod}}', Uri.parse(requestPath));
      {{#formParams}}{{^isFile}}
      if ({{paramName}} != null) {
        {{#isCollectionFormatMulti}}
        final List<String> stringValues = {{paramName}}.map((i) => parameterToString(i)).toList();
        mp.fields['{{baseName}}'] = stringValues;
        {{/isCollectionFormatMulti}}
        {{^isCollectionFormatMulti}}
        mp.fields['{{baseName}}'] = [parameterToString({{paramName}})];
        {{/isCollectionFormatMulti}}
      }
      {{/isFile}}{{#isFile}}
      
      {{#required}}
        mp.files.add(MultipartFile.fromBytes("{{paramName}}", {{paramName}}Bytes.toList(), filename: "somefile.xyz"));
      {{/required}}
      {{^required}}
      if ({{paramName}} != null) {
        mp.files.add(MultipartFile.fromBytes("{{paramName}}", {{paramName}}Bytes.toList(), filename: "somefile.xyz"));
      }
      {{/required}}

      {{/isFile}}{{/formParams}}
      postBody = mp;
    
    {{/hasFormParams}}

    final response = await _apiClient.invokeAPI(requestPath,
                                             '{{httpMethod}}',
                                             queryParams,
                                             postBody,
                                             headerParams,
                                             formParams,
                                             contentType,
                                             authNames);

    if(response.statusCode >= 400) {
    ApiErrorResponse error;
    try
    {
      error = _apiClient.deserialize(response.body, 'ApiErrorResponse');
    }
    catch (e)
    {
      throw ApiException(response.statusCode, response.body);
    }
      throw ApiException.withResponse(response.statusCode, response.reasonPhrase == null ? "Api response error" : response.reasonPhrase!, error);
     
    } else {
      return
      {{#isListContainer}}
        {{#returnType}}(_apiClient.deserialize(response.body, '{{{returnType}}}') as List).map((item) => item as {{returnBaseType}}).toList();{{/returnType}}
      {{/isListContainer}}
      {{^isListContainer}}
        {{#isMapContainer}}
          {{#returnType}}{{{returnType}}}.from(_apiClient.deserialize(response.body, '{{{returnType}}}')) {{/returnType}};
        {{/isMapContainer}}
        {{^isMapContainer}}
        {{#isResponseFile}}
        response.bodyBytes;
        {{/isResponseFile}}
        {{^isResponseFile}}
          {{#returnType}}_apiClient.deserialize(response.body, '{{{returnType}}}') as {{{returnType}}} {{/returnType}};
        {{/isResponseFile}}
        {{/isMapContainer}}
      {{/isListContainer}}
    }
  }
  {{/operation}}
}
{{/operations}}
