part of {{pubName}}.api;

class QueryParam {
  String name;
  String value;

  QueryParam(this.name, this.value);
}

class ApiClient {

  String basePath;
  final client = new {{#browserClient}}Browser{{/browserClient}}Client();

  Map<String, String> _defaultHeaderMap = {};
  late Authentication _authentication;

  final _regList = new RegExp(r'^List<(.*)>$');
  final _regMap = new RegExp(r'^Map<String,(.*)>$');

  ApiClient(
      {String? clientId,
      String? clientSecret,
      String? accessToken,
      tokenUrl: "https://api.aspose.cloud/connect/token",
      this.basePath: "https://api.aspose.cloud/v3.0"}) {
    _authentication = new OAuth(
        clientId: clientId,
        clientSecret: clientSecret,
        accessToken: accessToken,
        tokenUrl: tokenUrl);
  }

  void addDefaultHeader(String key, String value) {
     _defaultHeaderMap[key] = value;
  }

  dynamic _deserialize(dynamic value, String targetType) {
    try {
      switch (targetType) {
        case 'String':
          return '$value';
        case 'int':
          return value is int ? value : int.parse('$value');
        case 'bool':
          return value is bool ? value : '$value'.toLowerCase() == 'true';
        case 'double':
          return value is double ? value : double.parse('$value');
        {{#models}}
          {{#model}}
        case '{{classname}}':
            {{#isEnum}}
           return new {{classname}}.fromJson(value);
            {{/isEnum}}
            {{^isEnum}}
          return new {{classname}}.fromJson(value);
            {{/isEnum}}
          {{/model}}
        {{/models}}
        default:
          {
            RegExpMatch? match;
            if (value is List &&
                (match = _regList.firstMatch(targetType)) != null) {
              final newTargetType = match![1];
              return value.map((v) => _deserialize(v, newTargetType!)).toList();
            } else if (value is Map &&
                (match = _regMap.firstMatch(targetType)) != null) {
              final newTargetType = match![1];
              return new Map.fromIterables(value.keys,
                  value.values.map((v) => _deserialize(v, newTargetType!)));
            }
          }
      }
    } on Exception catch (e, stack) {
      throw new ApiException.withInner(0, 'Exception during deserialization.', e, stack);
    }
    throw new ApiException(0, 'Could not find a suitable class for deserialization');
  }

  dynamic deserialize(String jsonVal, String targetType) {
    // Remove all spaces.  Necessary for reg expressions as well.
    targetType = targetType.replaceAll(' ', '');

    if (targetType == 'String') {
      return jsonVal;
    }

    final decodedJson = json.decode(jsonVal);
    return _deserialize(decodedJson, targetType);
  }

  String serialize(Object? obj) {
    String serialized = '';
    if (obj == null) {
      serialized = '';
    } else {
      serialized = json.encode(obj);
    }
    return serialized;
  }

  // We don't use a Map<String, String> for queryParams.
  // If collectionFormat is 'multi' a key might appear multiple times.
  Future<Response> invokeAPI(String path,
                             String method,
                             List<QueryParam> queryParams,
                             Object? body,
                             Map<String, String> headerParams,
                             Map<String, String> formParams,
                             String contentType,
                             List<String> authNames) async {

    await _updateParamsForAuth(queryParams, headerParams);

    final ps = queryParams.map((p) => '${p.name}=${p.value}');
    final String queryString = ps.isNotEmpty ?
                         '?' + ps.join('&') :
                         '';

    final String url = basePath + path + queryString;

    headerParams.addAll(_defaultHeaderMap);
    headerParams['Content-Type'] = contentType;

    if(body is MultipartRequest) {
      final request = new MultipartRequest(method, Uri.parse(url));
      request.fields.addAll(body.fields);
      request.files.addAll(body.files);
      request.headers.addAll(body.headers);
      request.headers.addAll(headerParams);
      final response = await client.send(request);
      return Response.fromStream(response);
    } else {
      final msgBody = contentType == "application/x-www-form-urlencoded" ? formParams : serialize(body);
      switch(method) {
        case "POST":
          return client.post(Uri.parse(url), headers: headerParams, body: msgBody);
        case "PUT":
          return client.put(Uri.parse(url), headers: headerParams, body: msgBody);
        case "DELETE":
          return client.delete(Uri.parse(url), headers: headerParams);
        case "PATCH":
          return client.patch(Uri.parse(url), headers: headerParams, body: msgBody);
        default:
          return client.get(Uri.parse(url), headers: headerParams);
      }
    }
  }

  Future<void> _updateParamsForAuth(
      List<QueryParam> queryParams, Map<String, String> headerParams) async {
    await _authentication.applyToParams(queryParams, headerParams);
  }
}
