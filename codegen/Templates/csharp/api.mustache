{{>partial_header}}
using System.Collections.Generic;
using System.Net.Http;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using {{packageName}}.Interfaces;
using {{packageName}}.Internal;
using {{packageName}}.Internal.RequestHandlers;
using {{packageName}}.Model;


namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    ///     {{classname}}
    /// </summary>
    public class {{classname}} : I{{classname}}
    {
        private readonly ApiInvoker _apiInvoker;
        private readonly Configuration _configuration;


        /// <summary>
        ///     Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        /// <param name="configuration">Configuration settings</param>
        public {{classname}}(Configuration configuration)
        {
            _configuration = configuration;

            var requestHandlers = new List<IRequestHandler>();
            switch (_configuration.AuthType)
            {
                case AuthType.JWT:
                    requestHandlers.Add(new JwtRequestHandler(_configuration));
                    break;
                case AuthType.ExternalAuth:
                    requestHandlers.Add(new ExternalAuthorizationRequestHandler(_configuration));
                    break;
                default:
                    throw new System.ArgumentOutOfRangeException($"Unknown AuthType={_configuration.AuthType}.");
            }

            requestHandlers.Add(new DebugLogRequestHandler(_configuration));
            requestHandlers.Add(new ApiExceptionRequestHandler());
            _apiInvoker = new ApiInvoker(configuration, requestHandlers);
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        /// <param name="clientSecret">
        ///     The Client Secret.
        /// </param>
        /// <param name="clientId">
        ///     The Client Id.
        /// </param>
        public {{classname}}(string clientSecret, string clientId)
            : this(new Configuration { ClientSecret = clientSecret, ClientId = clientId })
        {
        }
        {{#operation}}
        /// <summary>
        /// {{summary}} {{notes}}
        /// </summary>
        {{#allParams}}/// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <returns>
        /// A task that represents the asynchronous operation. {{#returnType}}Task result type is  <see cref="{{returnType}}" /> {{/returnType}}
        /// </returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
       public async {{#returnType}}Task<{{{returnType}}}>{{/returnType}}{{^returnType}}Task{{/returnType}} {{nickname}}Async({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}System.Threading.CancellationToken cancellationToken = default)
        {
{{#allParams}}{{#required}}{{^isEnum}}            // verify the required parameter '{{paramName}}' is set
            if ({{paramName}} == null)
            {
                throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
            }
{{/isEnum}}{{/required}}{{/allParams}}            // create path and map variables
            string resourcePath = _configuration.GetApiRootUrl() + "{{path}}";
            resourcePath = Regex
                .Replace(resourcePath, "\\*", string.Empty)
                .Replace("&amp;", "&")
                .Replace("/?", "?");
            {{#headerParams}}
            {{#-first}}var headerParams = new Dictionary<string, string>();{{/-first}}
            {{/headerParams}}
            {{#formParams}}
            {{#-first}}var multipartContent = new MultipartFormDataContent();{{/-first}}
            {{^isEnum}}
            if ({{paramName}} != null)
            { {{/isEnum}}      {{#isEnum}}{{^required}}if ({{paramName}} != null)  { {{/required}}{{/isEnum}}
                {{#isFile}}
                 {{^required}}
            if ({{paramName}} != null)
            { {{/required}} 
                multipartContent.Add(new StreamContent({{paramName}}), "{{paramName}}", "{{paramName}}.png");
                {{^required}} } {{/required}}
                {{/isFile}}
                {{^isFile}}
                    {{#isCollectionFormatMulti}}
                    foreach (var oneParam in {{paramName}})
                    {
                        multipartContent.Add(new StringContent(oneParam.ToString()), "{{paramName}}");
                    }
                    {{/isCollectionFormatMulti}}
                    {{#isPrimitiveType}}
                    multipartContent.Add(new StringContent($"{ {{paramName}} }"), "{{paramName}}");
                    {{/isPrimitiveType}}
                {{/isFile}}
           {{^isEnum}} } {{/isEnum}}   {{#isEnum}}{{^required}} } {{/required}}{{/isEnum}}
            {{/formParams}}
            {{#pathParams}}
            resourcePath = UrlHelper.AddPathParameter(resourcePath, "{{paramName}}", {{paramName}});
            {{/pathParams}}
            {{#queryParams}}
            {{#-first}}#pragma warning disable CS0618 // Type or member is obsolete{{/-first}}
            resourcePath = UrlHelper.AddQueryParameterToUrl(resourcePath, "{{paramName}}", {{paramName}});
            {{#-last}}#pragma warning restore CS0618 // Type or member is obsolete{{/-last}}
            {{/queryParams}}
            {{#hasBodyParam}}string postBody = SerializationHelper.Serialize({{bodyParam.paramName}}); // http body (model) parameter{{/hasBodyParam}}

{{#vendorExtensions}}{{#x-binary-result}}            return await _apiInvoker.InvokeBinaryApiAsync(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                {{#hasHeaderParams}}headerParams{{/hasHeaderParams}}{{^hasHeaderParams}}null{{/hasHeaderParams}},
                {{#hasFormParams}}multipartContent{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});{{/x-binary-result}}{{/vendorExtensions}}{{#vendorExtensions}}{{^x-binary-result}}{{#returnType}} string response = await _apiInvoker.InvokeApiAsync(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                null,
                {{#hasFormParams}}multipartContent{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});

            if (response != null)
            {
                return ({{returnType}}) SerializationHelper.Deserialize(response, typeof({{returnType}}));
            }

            return null;
            {{/returnType}}
            {{^returnType}}
            await _apiInvoker.InvokeApiAsync(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                {{#hasHeaderParams}}headerParams{{/hasHeaderParams}}{{^hasHeaderParams}}null{{/hasHeaderParams}},
                {{#hasFormParams}}multipartContent{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});{{/returnType}}{{/x-binary-result}}{{/vendorExtensions}}
        }
        {{/operation}}
    }
    {{/operations}}
}
