{{>partial_header}}
//
// This source code was auto-generated by AsposeBarcodeCloudCodegen.
//

using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using {{packageName}}.Interfaces;
using {{packageName}}.Internal;
using {{packageName}}.Internal.RequestHandlers;
using {{packageName}}.Model;
using {{packageName}}.Model.Requests;

namespace {{packageName}}.Api
{
    {{#operations}}
    /// <summary>
    ///     {{classname}}
    /// </summary>
    public class {{classname}} : I{{classname}}
    {
        private readonly ApiInvoker _apiInvoker;
        private readonly Configuration _configuration;


        /// <summary>
        ///     Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        /// <param name="configuration">Configuration settings</param>
        public {{classname}}(Configuration configuration)
        {
            _configuration = configuration;

            var requestHandlers = new List<IRequestHandler>();
            switch (_configuration.AuthType)
            {
                case AuthType.JWT:
                    requestHandlers.Add(new JwtRequestHandler(_configuration));
                    break;
                case AuthType.ExternalAuth:
                    requestHandlers.Add(new ExternalAuthorizationRequestHandler(_configuration));
                    break;
                default:
                    throw new ArgumentOutOfRangeException($"Unknown AuthType={_configuration.AuthType}.");
            }

            requestHandlers.Add(new DebugLogRequestHandler(_configuration));
            requestHandlers.Add(new ApiExceptionRequestHandler());
            _apiInvoker = new ApiInvoker(configuration, requestHandlers);
        }

        /// <summary>
        ///     Initializes a new instance of the <see cref="{{classname}}" /> class.
        /// </summary>
        /// <param name="clientSecret">
        ///     The Client Secret.
        /// </param>
        /// <param name="clientId">
        ///     The Client Id.
        /// </param>
        public {{classname}}(string clientSecret, string clientId)
            : this(new Configuration { ClientSecret = clientSecret, ClientId = clientId })
        {
        }
        {{#operation}}

        /// <summary>
        ///     {{summary}} {{notes}}
        /// </summary>
        /// <param name="request">Request. <see cref="{{nickname}}Request" /></param>
        {{#returnType}}/// <returns>
        ///     <see cref="{{{returnType}}}" />
        /// </returns>{{/returnType}}
        public {{#returnType}}{{{returnType}}}{{/returnType}}{{^returnType}}void{{/returnType}} {{nickname}}({{nickname}}Request request)
        {
{{#allParams}}{{#required}}            // verify the required parameter '{{paramName}}' is set
            if (request.{{baseName}} == null)
            {
                throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{nickname}}");
            }
{{/required}}{{/allParams}}            // create path and map variables
            var resourcePath = _configuration.GetApiRootUrl() + "{{path}}";
            resourcePath = Regex
                .Replace(resourcePath, "\\*", string.Empty)
                .Replace("&amp;", "&")
                .Replace("/?", "?");
            {{#headerParams}}
            {{#-first}}var headerParams = new Dictionary<string, string>();{{/-first}}
            {{/headerParams}}
            {{#formParams}}
            {{#-first}}var formParams = new Dictionary<string, object>();{{/-first}}
            {{/formParams}}
            {{#pathParams}}
            resourcePath = UrlHelper.AddPathParameter(resourcePath, "{{paramName}}", request.{{baseName}});
            {{/pathParams}}
            {{#queryParams}}
            resourcePath = UrlHelper.AddQueryParameterToUrl(resourcePath, "{{paramName}}", request.{{baseName}});
            {{/queryParams}}

            var headerParams = new Dictionary<string, string>();
            {{#hasBodyParam}}var postBody = SerializationHelper.Serialize(request.{{bodyParam.baseName}}); // http body (model) parameter{{/hasBodyParam}}
            {{#formParams}}
            if (request.{{baseName}} != null)
            {
                {{#isFile}}
                formParams.Add("{{paramName}}", _apiInvoker.ToFileInfo(request.{{baseName}}, "{{baseName}}"));
                headerParams["Content-Type"] = "multipart/form-data";
                {{/isFile}}{{^isFile}}formParams.Add("{{baseName}}", request.{{baseName}}); // form parameter{{/isFile}}
            }
            {{/formParams}}
{{#vendorExtensions}}{{#x-binary-result}}            return _apiInvoker.InvokeBinaryApi(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                {{#hasHeaderParams}}headerParams{{/hasHeaderParams}}{{^hasHeaderParams}}null{{/hasHeaderParams}},
                {{#hasFormParams}}formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});{{/x-binary-result}}{{/vendorExtensions}}{{#vendorExtensions}}{{^x-binary-result}}{{#returnType}}            var response = _apiInvoker.InvokeApi(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                headerParams,
                {{#hasFormParams}}formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});

            if (response != null)
            {
                return ({{returnType}}) SerializationHelper.Deserialize(response, typeof({{returnType}}));
            }

            return null;
            {{/returnType}}
            {{^returnType}}
            _apiInvoker.InvokeApi(
                resourcePath,
                "{{httpMethod}}",
                {{#hasBodyParam}}postBody{{/hasBodyParam}}{{^hasBodyParam}}null{{/hasBodyParam}},
                {{#hasHeaderParams}}headerParams{{/hasHeaderParams}}{{^hasHeaderParams}}null{{/hasHeaderParams}},
                {{#hasFormParams}}formParams{{/hasFormParams}}{{^hasFormParams}}null{{/hasFormParams}});{{/returnType}}{{/x-binary-result}}{{/vendorExtensions}}
        }
        {{/operation}}
    }
    {{/operations}}
}
{{>requestModel}}
